<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>行波进位加法器和超前进位加法器</title>
      <link href="/2021/06/10/CLA-adder/"/>
      <url>/2021/06/10/CLA-adder/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在运算中，加法的效率和占用的资源一直是比较重要的因素，所有这篇博文将重点介绍RCA（行波进位加法器）和CLA（超前进位加法器）各自的优缺点。</p><span id="more"></span><h1 id="RCA介绍"><a href="#RCA介绍" class="headerlink" title="RCA介绍"></a>RCA介绍</h1><p>RCA作为一个比较直接得出的加法器，效率相比CLA稍低，但是占用的资源要少很多。<br><img src="https://res.cloudinary.com/db6zr5nzu/image/upload/v1594875033/Full_adder_u3e1jx.png"><br>上图是RCA的组成图。<br>每一位的计算都需要上一个全加器的Cout信号，所有信号的最长延长为2个门延迟4+1为9的延迟。如果计算的位数上升的话，需要2n+1的延迟。</p><p>但是每个全加器只需要5个门的资源。</p><h1 id="CLA介绍"><a href="#CLA介绍" class="headerlink" title="CLA介绍"></a>CLA介绍</h1><p>CLA作为一个速度优化的加法器，对于多位加法计算效率有显著提高，但是排线和资源占用的比较多。<br><img src="https://res.cloudinary.com/db6zr5nzu/image/upload/v1595224271/CLA_adder_tx272x.png"><br>上图是CLA的组成图。<br>这里的Cin计算取决于前面全加器就算得到的P和G的值，可以通过并行计算，最后通过OR门进行汇总。除了第一位的Cin延迟为2，其他的Cin延迟为3.那最长的延迟为Cin3 + 1 = 4。因为S = A[3] ^ B[3] ^ Cin[3]。</p><p>如果CLA的输入信号数量有限制的话，延迟和复杂度都会提升。<br><img src="https://res.cloudinary.com/db6zr5nzu/image/upload/v1595224643/complex_CLA_ie6tff.png"><br>如上图所示，如果输入限制四个的话，一个16进制的加法器就需要两层的P/G综合才能实现CLA的加法，这样以来加法器的延迟与电路复杂度也会变糟。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>以下是本人写的CLA的加法器。</p><h2 id="CLA模块代码"><a href="#CLA模块代码" class="headerlink" title="CLA模块代码"></a>CLA模块代码</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> FA_Seq(</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> <span class="keyword">unsigned</span> [<span class="number">5</span>:<span class="number">0</span>] A,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> <span class="keyword">unsigned</span> [<span class="number">5</span>:<span class="number">0</span>] B,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">6</span>:<span class="number">0</span>] Sum,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> Cout</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] P;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] G;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] C;</span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">P = A ^ B; <span class="comment">//p flag XOR门</span></span><br><span class="line">G = A &amp; B; <span class="comment">//g  flag </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">C[<span class="number">0</span>] = G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; <span class="number">1&#x27;b0</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">C[i+<span class="number">1</span>] = G[i+<span class="number">1</span>] | (C[i] &amp; P[i+<span class="number">1</span>]); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Sum = (A ^ B) ^ &#123;C[<span class="number">4</span>:<span class="number">0</span>],<span class="number">1&#x27;b0</span>&#125;;</span><br><span class="line">Sum[<span class="number">6</span>] = C[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> Cout = C[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>因为RCA加法器较为简单所以就不写了。</p><h2 id="CLA测试代码"><a href="#CLA测试代码" class="headerlink" title="CLA测试代码"></a>CLA测试代码</h2><p>然后用不规范的例子简单的做了测试，应该没有问题。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> tb_FA_Seq;</span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1 ns / 1 ns</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> testcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] array1 ;</span><br><span class="line"><span class="keyword">logic</span> a,b,c;</span><br><span class="line"><span class="keyword">logic</span> CLK = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] aa;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] bb;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] cc;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] A,B;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] Sum;</span><br><span class="line"><span class="keyword">reg</span> Cout;</span><br><span class="line">FA_Seq PROG (A, B, Sum, Cout);</span><br><span class="line"><span class="keyword">always</span> <span class="variable">#(PERIOD /2)</span> CLK ++;</span><br><span class="line"><span class="keyword">initial</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">//initalidalization</span></span><br><span class="line">  A = &#x27;<span class="number">0</span>;</span><br><span class="line">  B = &#x27;<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//Cin = &#x27;0;</span></span><br><span class="line">  Sum = &#x27;<span class="number">0</span>;</span><br><span class="line">  Cout = &#x27;<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//case 1 </span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  testcase ++;</span><br><span class="line">  A = &#x27;<span class="number">1</span>;</span><br><span class="line">  B = &#x27;<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//Cin = 0;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//case 2</span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  testcase ++;</span><br><span class="line">  A = &#x27;<span class="number">0</span>;</span><br><span class="line">  B = &#x27;<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//Cin = 0;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//case 3</span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  testcase ++;</span><br><span class="line">  A = &#x27;<span class="number">1</span>;</span><br><span class="line">  B = &#x27;<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//case 4;</span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  A = <span class="number">6&#x27;d12</span>;</span><br><span class="line">  B = <span class="number">6&#x27;d23</span>;</span><br><span class="line">  <span class="comment">//case 5;</span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  A = <span class="number">6&#x27;d3</span>;</span><br><span class="line">  B = <span class="number">6&#x27;d8</span>;</span><br><span class="line">  <span class="comment">//case 6;</span></span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">  A = <span class="number">6&#x27;d4</span>;</span><br><span class="line">  B = <span class="number">6&#x27;d6</span>;</span><br><span class="line">  @(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="Waveform"><a href="#Waveform" class="headerlink" title="Waveform"></a>Waveform</h2><p>waveform如下图所示<br><img src="https://res.cloudinary.com/db6zr5nzu/image/upload/v1595231937/adder_waveform_xauyou.png"></p><p>以上是CLA和RCA加法器的介绍</p>]]></content>
      
      
      <categories>
          
          <category> 数字电路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Systemverilog </tag>
            
            <tag> 加法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计</title>
      <link href="/2020/05/23/senior-design/"/>
      <url>/2020/05/23/senior-design/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>这个项目主要是实现了一个电子名片的功能。这是个实体电子名片的设计，由一个硅谷工程师微型计算机名片得到灵感。由于设计难度过大，对计算机组成在当时还不熟悉，所以做了较大的改变。</p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>设计最初打算用micro-python做一个USB接口的优盘，然后插入电脑时，能自动弹开一个像本博客一样的网页。但是由于太过简单，而且多数电脑对自动打开程序，类似病毒的脚本的行为会进行安全措施，这个毕业设计在一开始险些被砍掉。<br>最后改成了如下的需求才给予通过。</p><p>该电子名片在不接入电脑时，能显示所有者的姓名，地址，电话号码，邮箱，地址等文本内容，同时能显示个人头像或者微信二维码等图像。</p><p>当手机靠近该电子名片，并打开任意NFC app能接受预先储存于电子名片内的信息，比如个人简历的PDF或者个人网站域名。</p><p>当电子名片接入电脑时，能出现像正常U盘一样在电脑上访问的磁盘，里面的文件都是只读的权限，同时不能复制，保护用户的个人隐私，并且保证用户的所有权。只有用户或者访问者打开U盘中的UI程序输入正确的密码，才给予写和复制的权限。密码保存在原地，但是被加密。同时改变电子名片显示的信息和图片均可以通过该UI程序进行修改，同时NFC需要发送的内容也可以进行修改。当保存键按下时，信息会自动更新。</p><h4 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173169/sketchpng_up0mrk.png"></p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>大容量usb储存：实现U盘功能，同时需要足够储存大小。用到了安卓手机的Micro-SD 卡。<br>黑白墨迹屏幕：显示文本和图片。<br>NFC：发送信息给手机。<br><img src="https://pic4.zhimg.com/80/v2-0d60706e016452b7901ca174755b186b_1440w.jpg"></p><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173238/blockDia_rntrjc.png"></p><h3 id="选择这款屏幕的原因"><a href="#选择这款屏幕的原因" class="headerlink" title="选择这款屏幕的原因"></a>选择这款屏幕的原因</h3><p>因为当初设计的时候需要一个尽量小，且能持续显示的屏幕。所以显示了像kindle一样的墨迹屏，而且该屏幕不需要供电就能维持显示的状态，所以完美符合了需求，再者因为若干墨迹屏中只有这款屏幕的刷新时间在两秒以内，最终就选择了这款产品。</p><h3 id="次级系统1：USB-大容量储存"><a href="#次级系统1：USB-大容量储存" class="headerlink" title="次级系统1：USB 大容量储存"></a>次级系统1：USB 大容量储存</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173358/mass_storage_ocpop6.png"></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>该部分用STM32cubeIDE 和STM32MUX 一起完成，打开了USB mass storage然后修改storage_config_if.c中的读写和获取状态方程即可。但是中间一直有个问题，USB和盘符一张无法正确读取，直到让写的方程等到能读到卡的状态后，运行指令才成功，但是需要大概一分钟电脑才能读到磁盘。</p><h3 id="次级系统2：图像处理和Micro-SD卡读写"><a href="#次级系统2：图像处理和Micro-SD卡读写" class="headerlink" title="次级系统2：图像处理和Micro-SD卡读写"></a>次级系统2：图像处理和Micro-SD卡读写</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173357/ImagePro_vdfpdc.png"><br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173539/flowchart_jonb1v.png"></p><h4 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h4><p>该部分需要读取已经保存在Micro-SD卡中解码的图像的数列及文本，然后改变大小，改变色彩显示模式，最后根据屏幕驱动把图像和文本在屏幕上显示出来。</p><h3 id="次级系统3：UI和NFC模块"><a href="#次级系统3：UI和NFC模块" class="headerlink" title="次级系统3：UI和NFC模块"></a>次级系统3：UI和NFC模块</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173539/UI_lepqzz.png"><br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173539/NFC_wab78v.png"></p><h4 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h4><p>该部分需要在插入U盘后，有一个可以执行的UI程序，方便用户。同时NFC模块读取SD卡中的相应内容，储存在NFC模块的标签上。</p><h3 id="次级系统4：图像解码"><a href="#次级系统4：图像解码" class="headerlink" title="次级系统4：图像解码"></a>次级系统4：图像解码</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1590173537/Decoder_hdstmz.png"></p><h4 id="过程-3"><a href="#过程-3" class="headerlink" title="过程"></a>过程</h4><p>该部分需要在插入U盘后，有一个可以执行的UI程序，方便用户。同时NFC模块读取SD卡中的相应内容，储存在NFC模块的标签上。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后nfc的步骤目前只能读取信息还不能写，和主单片机的交互的spi也没有实现。<br>目前就是这样，整张名片成本大概50美元，并且usb大容量储存的相应时间比较久，需要一两分钟，原因还未知。</p><h3 id="Github链接及英文描述"><a href="#Github链接及英文描述" class="headerlink" title="Github链接及英文描述"></a>Github链接及英文描述</h3><p><a href="https://github.com/Zhang-Rick/ECE49022_Senior_Design">https://github.com/Zhang-Rick/ECE49022_Senior_Design</a><br>演示视频<br><a href="https://www.youtube.com/watch?v=P2ZDCQjS7qo">https://www.youtube.com/watch?v=P2ZDCQjS7qo</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Embedded C </tag>
            
            <tag> project </tag>
            
            <tag> hardware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>singlecycle设计及实现3(control unit控制单元)</title>
      <link href="/2020/03/24/singlecycle-control/"/>
      <url>/2020/03/24/singlecycle-control/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这篇博文主要介绍的是基于mips的 singlecycle CPU设计及实现的第三个单元control_unit算术逻辑单元。</p><span id="more"></span><h3 id="RTL-图像"><a href="#RTL-图像" class="headerlink" title="RTL 图像"></a>RTL 图像</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1584759605/datapath_jchv0c.png"><br>接着上次博客对alu的介绍，本次本应该讲述memory储存的。涉及到储存，缓存就是性能提升的一个重要的步骤，但是由于缓存的内容比较多，所以打算单独放出来单独讨论。这次将讲解control_unit控制单元。</p><h3 id="控制单元详解"><a href="#控制单元详解" class="headerlink" title="控制单元详解"></a>控制单元详解</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1585026711/image001_mtevmx.jpg"><br>依照上图，控制单元代表的是当完整的指令被解码的时候，具体要用哪些模块就会马上知道，所以控制这些模块的信号也会马上释放。</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1585027156/%E5%9B%BE%E7%89%87243_vc15c2.png"><br>例如我们解码的指令是ld rt，imm16(rs)<br>含义：取rs+imm16储存地址上的值，并把它赋给rt。<br>首先需要通过alu把实际地址算出来，然从储存读值，最后把值储存到寄存器中特定的地址。</p><ol><li>数据输入alu逻辑算术单元，busA不变，busB为带符号的立即执行，所以选择{16*最高位,原来16位数字}。ALUsrc = signExT</li><li>加法计算实际地址，ALUop = add</li><li>从memory储存中读取，不是写。MemWr = 0，DataIn 无所谓</li><li>选取memory输出的值。MemtoReg = 1，选储存出来的值</li><li>对寄存器进行写入。RegWr = 1</li><li>写入目标地址为rt。RegDst= rt<br>所以以上就是解码这个指令得到的所有的控制信号。所以如果要正确的处理所有的信号，需要理解所有信号的作用及自己构建的CPU的功能。</li></ol><p>以下的是这个CPU所有需要包括的指令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">`MIPS Instruction Set Architecture</span><br><span class="line"></span><br><span class="line">---------------------&lt;reserved registers&gt;------------------------</span><br><span class="line">$<span class="number">0</span>                   zero</span><br><span class="line">$<span class="number">1</span>                   assembler temporary</span><br><span class="line">$<span class="number">29</span>                  <span class="built_in">stack</span> pointer</span><br><span class="line">$<span class="number">31</span>                  <span class="keyword">return</span> address</span><br><span class="line">---------------------&lt;R-type Instructions&gt;-----------------------</span><br><span class="line">ADDU   $rd,$rs,$rt   R[rd] &lt;= R[rs] + R[rt] (unchecked overflow)</span><br><span class="line">ADD    $rd,$rs,$rt   R[rd] &lt;= R[rs] + R[rt]</span><br><span class="line">AND    $rd,$rs,$rt   R[rd] &lt;= R[rs] AND R[rt]</span><br><span class="line">JR     $rs           PC &lt;= R[rs]</span><br><span class="line">NOR    $rd,$rs,$rt   R[rd] &lt;= ~(R[rs] OR R[rt])</span><br><span class="line">OR     $rd,$rs,$rt   R[rd] &lt;= R[rs] OR R[rt]</span><br><span class="line">SLT    $rd,$rs,$rt   R[rd] &lt;= (R[rs] &lt; R[rt]) ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">SLTU   $rd,$rs,$rt   R[rd] &lt;= (R[rs] &lt; R[rt]) ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">SLLV   $rd,$rs,$rt   R[rd] &lt;= R[rt] &lt;&lt; [<span class="number">0</span>:<span class="number">4</span>] R[rs]</span><br><span class="line">SRLV   $rd,$rs,$rt   R[rd] &lt;= R[rt] &gt;&gt; [<span class="number">0</span>:<span class="number">4</span>] R[rs]</span><br><span class="line">SUBU   $rd,$rs,$rt   R[rd] &lt;= R[rs] - R[rt] (unchecked overflow)</span><br><span class="line">SUB    $rd,$rs,$rt   R[rd] &lt;= R[rs] - R[rt]</span><br><span class="line">XOR    $rd,$rs,$rt   R[rd] &lt;= R[rs] XOR R[rt]</span><br><span class="line">---------------------&lt;I-type Instructions&gt;-----------------------</span><br><span class="line">ADDIU  $rt,$rs,imm   R[rt] &lt;= R[rs] + SignExtImm (unchecked overflow)</span><br><span class="line">ADDI   $rt,$rs,imm   R[rt] &lt;= R[rs] + SignExtImm</span><br><span class="line">ANDI   $rt,$rs,imm   R[rt] &lt;= R[rs] &amp; ZeroExtImm</span><br><span class="line">BEQ    $rs,$rt,label PC &lt;= (R[rs] == R[rt]) ? npc+BranchAddr : npc</span><br><span class="line">BNE    $rs,$rt,label PC &lt;= (R[rs] != R[rt]) ? npc+BranchAddr : npc</span><br><span class="line">LUI    $rt,imm       R[rt] &lt;= &#123;imm,<span class="number">16b</span><span class="number">&#x27;0</span>&#125;</span><br><span class="line">LW     $rt,imm($rs)  R[rt] &lt;= M[R[rs] + SignExtImm]</span><br><span class="line">ORI    $rt,$rs,imm   R[rt] &lt;= R[rs] OR ZeroExtImm</span><br><span class="line">SLTI   $rt,$rs,imm   R[rt] &lt;= (R[rs] &lt; SignExtImm) ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">SLTIU  $rt,$rs,imm   R[rt] &lt;= (R[rs] &lt; SignExtImm) ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">SW     $rt,imm($rs)  M[R[rs] + SignExtImm] &lt;= R[rt]</span><br><span class="line">LL     $rt,imm($rs)  R[rt] &lt;= M[R[rs] + SignExtImm]; rmwstate &lt;= addr</span><br><span class="line">SC     $rt,imm($rs)  <span class="keyword">if</span> (rmw) M[R[rs] + SignExtImm] &lt;= R[rt], R[rt] &lt;= <span class="number">1</span> <span class="keyword">else</span> R[rt] &lt;= <span class="number">0</span></span><br><span class="line">XORI   $rt,$rs,imm   R[rt] &lt;= R[rs] XOR ZeroExtImm</span><br><span class="line">---------------------&lt;J-type Instructions&gt;-----------------------</span><br><span class="line">J      label         PC &lt;= JumpAddr</span><br><span class="line">JAL    label         R[<span class="number">31</span>] &lt;= npc; PC &lt;= JumpAddr</span><br><span class="line">---------------------&lt;Other Instructions&gt;------------------------</span><br><span class="line">HALT</span><br><span class="line">---------------------&lt;Pseudo Instructions&gt;-----------------------</span><br><span class="line">PUSH   $rs           $<span class="number">29</span> &lt;= $<span class="number">29</span> - <span class="number">4</span>; Mem[$<span class="number">29</span>+<span class="number">0</span>] &lt;= R[rs] (sub+sw)</span><br><span class="line">POP    $rt           R[rt] &lt;= Mem[$<span class="number">29</span>+<span class="number">0</span>]; $<span class="number">29</span> &lt;= $<span class="number">29</span> + <span class="number">4</span> (add+lw)</span><br><span class="line">NOP                  Nop</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">org  Addr         Set the base address <span class="keyword">for</span> the code to follow </span><br><span class="line">chw  #            Assign value to half word memory</span><br><span class="line">cfw  #            Assign value to word of memory</span><br></pre></td></tr></table></figure><p>`所以根据以上的指令集进行了归类，主要注意的是ALUsrc需要哪些input，做出了以下的表格进行整理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">/*</span></span><br><span class="line"><span class="comment">|    Var    |    00     |    01     |    10     |    11    |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  ALUSrc   |    rs     |  unsign   |    sll    |   sign   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  RegDst   |    rt     |    rd     |    31     |   zero   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  PCSrc    |    no     |  Branch   |    JR     |  J/JAL   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  DAtaSrc  |  portout  | dmemload  |    lui    |   PC+4   |</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`所以看了一下，数据线B总共有datab，没符号立即数，有符号立即数以及SLL这种只取寄存器其中的五位。<br>JAL这个指令需要跳转，同时把跳转回来的程序地址储存到31号寄存器中。</p><h5 id="主代码control-unit-sv"><a href="#主代码control-unit-sv" class="headerlink" title="主代码control_unit.sv"></a>主代码control_unit.sv</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">``<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;control_unit_if.vh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> control_unit(</span><br><span class="line">control_unit_if<span class="variable">.ctr</span> cuif</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|    Var    |    00     |    01     |    10     |    11    |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  ALUSrc   |    rs     |  unsign   |    slt    |   sign   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  RegDst   |    rt     |    rd     |    31     |   zero   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  PCSrc    |    no     |  Branch   |    JR     |  J/JAL   |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|  DAtaSrc  |  portout  | dmemload  |    lui    |   PC+4   |</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"> <span class="keyword">logic</span> equFlag;</span><br><span class="line"><span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">equFlag = <span class="number">0</span>;<span class="comment">//beq bne flag</span></span><br><span class="line"></span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">0</span>;<span class="comment">//pc mux</span></span><br><span class="line">cuif<span class="variable">.DataSrc</span> = <span class="number">0</span>;<span class="comment">//memory to register mux</span></span><br><span class="line">cuif<span class="variable">.ALUSrc</span> = <span class="number">0</span>;<span class="comment">//data bus 2 mux</span></span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">0</span>;<span class="comment">//destination register mux</span></span><br><span class="line"></span><br><span class="line">cuif<span class="variable">.memREN</span> = <span class="number">0</span>;</span><br><span class="line">cuif<span class="variable">.memWEN</span> = <span class="number">0</span>;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">0</span>;</span><br><span class="line">cuif<span class="variable">.halt</span> = <span class="number">0</span>;</span><br><span class="line">    cuif<span class="variable">.branch</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_ADD;</span><br><span class="line"><span class="keyword">case</span>(cuif<span class="variable">.opcode</span>)</span><br><span class="line">RTYPE: <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(cuif<span class="variable">.funct</span>)</span><br><span class="line">SLLV: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SLL;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span> = <span class="number">2&#x27;b10</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SRLV: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SRL;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span> = <span class="number">2&#x27;b10</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">JR:  <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">2&#x27;b10</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ADD: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_ADD;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ADDU: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_ADD;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SUB: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SUB;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SUBU: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SUB;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">AND: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_AND;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">OR: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_OR;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">XOR: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_XOR;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">NOR: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_NOR;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SLT: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SLT;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SLTU: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SLTU;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">//j type</span></span><br><span class="line">J: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">2&#x27;b11</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">JAL: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">2&#x27;b11</span>;</span><br><span class="line">cuif<span class="variable">.RegDest</span> = <span class="number">2&#x27;b10</span>;</span><br><span class="line">cuif<span class="variable">.RegWEN</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.DataSrc</span> = <span class="number">2&#x27;b11</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//itype</span></span><br><span class="line">BEQ: <span class="keyword">begin</span></span><br><span class="line">equFlag = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SUB;</span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.branch</span>=cuif<span class="variable">.zerFlag</span> &amp; equFlag;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">BNE: <span class="keyword">begin</span></span><br><span class="line">equFlag = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span> = ALU_SUB;</span><br><span class="line">cuif<span class="variable">.PCSrc</span> = <span class="number">1</span>;</span><br><span class="line">cuif<span class="variable">.branch</span>=cuif<span class="variable">.zerFlag</span> ^ equFlag;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ADDI: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b11</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_ADD;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ADDIU: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b11</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_ADD;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ORI: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_OR;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">XORI: <span class="keyword">begin</span></span><br><span class="line"> cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_XOR;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">LUI: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.DataSrc</span>=<span class="number">2&#x27;b10</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">LW: <span class="keyword">begin</span></span><br><span class="line">   cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b11</span>;</span><br><span class="line">   cuif<span class="variable">.memREN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">   cuif<span class="variable">.DataSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">   cuif<span class="variable">.ALUOP</span>=ALU_ADD;</span><br><span class="line">   cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SLTI: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_SLT;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SLTIU: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_SLTU;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ANDI: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b11</span>;</span><br><span class="line">cuif<span class="variable">.ALUOP</span>=ALU_AND;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">SW: <span class="keyword">begin</span></span><br><span class="line">   cuif<span class="variable">.ALUSrc</span>=<span class="number">2&#x27;b11</span>;</span><br><span class="line">   cuif<span class="variable">.memWEN</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">   cuif<span class="variable">.DataSrc</span>=<span class="number">2&#x27;b1</span>;</span><br><span class="line">   cuif<span class="variable">.ALUOP</span>=ALU_ADD;</span><br><span class="line">   cuif<span class="variable">.RegWEN</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">HALT: <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.halt</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`</p><h5 id="接口代码control-unit-if-vh"><a href="#接口代码control-unit-if-vh" class="headerlink" title="接口代码control_unit_if.vh"></a>接口代码control_unit_if.vh</h5><p>这次输入输出信号非常的多，所以写了接口代码。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">ifndef</span> CONTROL_UNIT_IF_VH</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">define</span> CONTROL_UNIT_IF_VH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedefs</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> control_unit_if;</span><br><span class="line">  <span class="comment">// import types</span></span><br><span class="line">  <span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"></span><br><span class="line">opcode_t opcode;</span><br><span class="line">funct_t  funct;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">1</span>:<span class="number">0</span>] PCSrc,DataSrc,ALUSrc,RegDest;</span><br><span class="line"><span class="keyword">logic</span> memREN, memWEN, RegWEN, halt, zerFlag, branch, dhit, ihit;</span><br><span class="line"><span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] ALUOP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">modport</span> ctr (</span><br><span class="line"><span class="keyword">input</span> opcode, funct, zerFlag,dhit,ihit,</span><br><span class="line"><span class="keyword">output</span> PCSrc,DataSrc,ALUSrc, memREN, memWEN, RegWEN, ALUOP, RegDest, halt, branch</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">modport</span> tb (</span><br><span class="line"><span class="keyword">input</span> PCSrc,DataSrc,ALUSrc, memREN, memWEN, RegWEN, ALUOP, RegDest, halt, branch,</span><br><span class="line"><span class="keyword">output</span> opcode, funct, zerFlag, dhit</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endinterface</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`</p><h5 id="接口代码control-unit-tb-sv"><a href="#接口代码control-unit-tb-sv" class="headerlink" title="接口代码control_unit_tb.sv"></a>接口代码control_unit_tb.sv</h5><p>这次测试代码按照规范一个个写了assert来验证，但是很奇怪有些的assert就是对不上。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;control_unit_if.vh&quot;</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1 ns / 1 ns</span></span><br><span class="line"><span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"><span class="keyword">module</span> control_unit_tb;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">logic</span> CLK = <span class="number">0</span>, nRST;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// clock</span></span><br><span class="line">   <span class="keyword">always</span> <span class="variable">#(PERIOD/2)</span> CLK++;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//interface</span></span><br><span class="line">   control_unit_if cuif();</span><br><span class="line">test21 prog(CLK,nRst,cuif); </span><br><span class="line">   <span class="comment">//test program</span></span><br><span class="line">   <span class="comment">//test PROG (CLK, nRST, cuif);</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">ifndef</span> MAPPED</span></span><br><span class="line">   control_unit DUT(cuif);</span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">program</span> test21 (<span class="keyword">input</span> <span class="keyword">logic</span> CLK, </span><br><span class="line">      <span class="keyword">output</span> <span class="keyword">logic</span> nRST,</span><br><span class="line">      control_unit_if<span class="variable">.tb</span> cuif);</span><br><span class="line"><span class="keyword">int</span> testcase =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.funct</span>=SLLV;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="comment">//test reset</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test J type</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=J;<span class="comment">//J</span></span><br><span class="line"><span class="comment">//cuif.funct=SLLV;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b11</span>)<span class="keyword">else</span>  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test JAL type</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=JAL;<span class="comment">//JAL</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b11</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">2&#x27;b10</span> &amp;&amp; cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.DataSrc</span> == <span class="number">2&#x27;b11</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=BEQ;<span class="comment">//BEQ</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.PCSrc</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.branch</span> == <span class="number">0</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=BNE;<span class="comment">//BNE</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.PCSrc</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.branch</span>==<span class="number">1</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=ADDI;<span class="comment">//ADDI</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.RegWEN</span>==<span class="number">1&#x27;b1</span> &amp;&amp; cuif<span class="variable">.ALUSrc</span>==<span class="number">2&#x27;b1</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=ANDI;<span class="comment">//ANDI</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span>==<span class="number">1&#x27;b1</span> &amp;&amp; cuif<span class="variable">.ALUSrc</span>==<span class="number">2&#x27;b11</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">        @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=ORI;<span class="comment">//ORI</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span>==<span class="number">1&#x27;b1</span> &amp;&amp; cuif<span class="variable">.ALUSrc</span>==<span class="number">2&#x27;b11</span>)<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">        @(<span class="keyword">posedge</span> CLK)        </span><br><span class="line">testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=LUI;<span class="comment">//LUI</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.RegWEN</span>==<span class="number">1&#x27;b1</span> &amp;&amp; cuif<span class="variable">.DataSrc</span>==<span class="number">2&#x27;b10</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test itype</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=HALT;<span class="comment">//HALT</span></span><br><span class="line"><span class="comment">//cuif.funct=&#x27;0;</span></span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.halt</span>==<span class="number">1&#x27;b1</span>)  <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SLLV;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.ALUSrc</span> == <span class="number">2&#x27;b10</span>)<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SRLV;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> ==<span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span>)<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=ADD;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=ADDU;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUBU;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=AND;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=OR;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> )<span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=XOR;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> )  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=NOR;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> ) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SLT;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> ( cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> ) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SLTU;<span class="comment">//SLL</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">if</span> ( ~(cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.RegDest</span> == <span class="number">1</span> &amp;&amp; cuif<span class="variable">.ALUSrc</span> == <span class="number">2&#x27;b10</span>))  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=JR;<span class="comment">//JR</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b10</span>)   <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=RTYPE;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b1</span> &amp;&amp; cuif<span class="variable">.RegWEN</span> == <span class="number">1</span> ) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=ADDIU;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b1</span>)  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=SLTI;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b1</span>)  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=SLTIU;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.PCSrc</span> == <span class="number">2&#x27;b1</span>) <span class="keyword">else</span> <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=XORI;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.ALUSrc</span> == <span class="number">2&#x27;b11</span>)  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=LW;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.ALUSrc</span> == <span class="number">2&#x27;b11</span> &amp;&amp;  cuif<span class="variable">.DataSrc</span> == <span class="number">1</span> )  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">        testcase++;<span class="comment">//test Rtype</span></span><br><span class="line">cuif<span class="variable">.funct</span>=SUB;<span class="comment">//SUB</span></span><br><span class="line">cuif<span class="variable">.opcode</span>=SW;</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">assert</span> (cuif<span class="variable">.ALUSrc</span> == <span class="number">2&#x27;b11</span> &amp;&amp;  cuif<span class="variable">.DataSrc</span> == <span class="number">1</span>)  <span class="built_in">$display</span>(<span class="string">&quot;It&#x27;s gone wrong addtime %00g ns&quot;</span>,<span class="built_in">$time</span>);</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">cuif<span class="variable">.zerFlag</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">cuif<span class="variable">.ihit</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">cuif<span class="variable">.dhit</span>=<span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">cuif<span class="variable">.ihit</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">cuif<span class="variable">.dhit</span>=<span class="number">1&#x27;b1</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="built_in">$finish</span>;       </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endprogram</span></span><br></pre></td></tr></table></figure><p>`以上就是控制单元的代码，接下来就会是一个总的单元用于处理所有小的模块和前面写过的模块。</p>]]></content>
      
      
      <categories>
          
          <category> mips CPU design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> verilog </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>singlecycle设计及实现2 (ALU算术逻辑单元)</title>
      <link href="/2020/03/21/singlecycle-alu/"/>
      <url>/2020/03/21/singlecycle-alu/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这篇博文主要介绍的是基于mips的 singlecycle CPU设计及实现的第二个单元ALU算术逻辑单元。</p><span id="more"></span><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1584759605/datapath_jchv0c.png"><br>衔接上篇的寄存器的讨论，这次将对ALU算术逻辑单元进行编写。mips支持的指令有很多指令形式(instruction format)，如<br>R-type：Op, rs, rt, rd 单纯只用到了寄存器的值，<br>I-type：OP rt, IMM(rs) 或 OP  rs, rt, IMM 用到了立即值，(这里的立即值是16位)<br>J-type：Op, address 用到了地址。(这里的地址是26位)。<br>为什么要进行分类呢，因为根据不同的类型，ALU 算术逻辑单元的数据总线的值可能会有不同。<br>例如：<br>R-type ADD：bus1 就是rt, bus2 就是rd<br>I-type LD：     bus1 就是rs, bus2就是 IMM<br>I-type BEQ：  bus1 就是rs, bus2就是 IMM(减法判断结果是不是0)<br>j-type JAL：   不需要ALU，PC单元能够单独解决。</p><p>算术逻辑单元只能实现一些比较简单的算术，但是mips却支持很多的指令。因为这些复杂的指令可以通过简单的逻辑算术和别的模块解决。</p><p>但是为什么不能直接根据opcode直接进行运算，像 opcode == add 把rt + rd的值放入rs。直接把多个模块需要合作解决的和在一起。 因为通过简单的逻辑指令和别的模块的合作，能灵活的实现复杂的指令，最重要的是能省下不少晶体管。</p><p>那为什么算术逻辑单元的输出还有负数符号，溢出符号。但是在总的singlecycle CPU设计上没有这些输出信号，因为mips不关心溢出和负数符号，但是零符号是需要用来检测分支的。</p><h4 id="ALU-算术逻辑单元"><a href="#ALU-算术逻辑单元" class="headerlink" title="ALU 算术逻辑单元"></a>ALU 算术逻辑单元</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1584871537/lab2__1_uwlege.png"><br>如图所示上图展示了算术逻辑单元的一些输入及输出。<br>输入:<br>PortA(31:0) 32位的bus1输入<br>PortB(31:0) 32位的bus2输入<br>ALUOP(3:0) 算术逻辑单元指令选择<br>输出:<br>Negative 负符号<br>Overflow 溢出符号<br>Zero 零符号<br>Output Port(31:0) 算术逻辑单元输出</p><p>这次因为接口比较少，所以偷了懒没有写接口文件，但是写了FPGA文件。</p><h5 id="主代码alu-sv"><a href="#主代码alu-sv" class="headerlink" title="主代码alu.sv"></a>主代码alu.sv</h5> <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">``<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"><span class="keyword">module</span> alu</span><br><span class="line">(</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] portA,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] portB,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] aluOP,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> negFlag,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> oveFlag,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> zerFlag,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] outputPort</span><br><span class="line">);</span><br><span class="line"><span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"><span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">negFlag = <span class="number">0</span>;</span><br><span class="line">oveFlag = <span class="number">0</span>;</span><br><span class="line">zerFlag = <span class="number">0</span>;</span><br><span class="line">outputPort = &#x27;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (aluOP == ALU_SLL)<span class="comment">//向左移</span></span><br><span class="line">outputPort =  portB &lt;&lt; portA;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_SRL))<span class="comment">//向右移</span></span><br><span class="line">outputPort =  portB &gt;&gt; portA;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_ADD) <span class="keyword">begin</span>)<span class="comment">//加</span></span><br><span class="line">outputPort = portA + portB;</span><br><span class="line"><span class="keyword">if</span> (outputPort[<span class="number">31</span>] != (portA[<span class="number">31</span>] ^ portB[<span class="number">31</span>]))</span><br><span class="line">oveFlag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_SUB) <span class="keyword">begin</span><span class="comment">//减</span></span><br><span class="line">outputPort = portA - portB;</span><br><span class="line"><span class="keyword">if</span> (outputPort[<span class="number">31</span>] != (portA[<span class="number">31</span>] ^ portB[<span class="number">31</span>]))</span><br><span class="line">oveFlag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_AND)<span class="comment">//和</span></span><br><span class="line">outputPort = portA &amp; portB;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_OR)<span class="comment">//或</span></span><br><span class="line">outputPort = portA | portB;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_XOR)<span class="comment">//异或</span></span><br><span class="line">outputPort = portA ^ portB;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_NOR)<span class="comment">//非或</span></span><br><span class="line">outputPort = ~(portA | portB);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_SLTU)<span class="comment">//小于不考虑符号</span></span><br><span class="line">outputPort = portA &lt; portB;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aluOP == ALU_SLT) <span class="keyword">begin</span><span class="comment">//小于考虑符号 这段代码应该写错了 最后评分就这段没过测试</span></span><br><span class="line"><span class="keyword">if</span> (portA[<span class="number">31</span>] == <span class="number">1</span> &amp;&amp; portB[<span class="number">31</span>] == <span class="number">0</span>)</span><br><span class="line">outputPort = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (portA[<span class="number">31</span>] == <span class="number">0</span> &amp;&amp; portB[<span class="number">31</span>] == <span class="number">1</span>)</span><br><span class="line">outputPort = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">outputPort = portA &lt; portB;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> <span class="comment">//单独判断零和负符号</span></span><br><span class="line"><span class="keyword">if</span> (outputPort == <span class="number">0</span>)</span><br><span class="line">zerFlag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (outputPort[<span class="number">31</span>] == <span class="number">1</span>)</span><br><span class="line">negFlag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`<br>这次测试代码直接用最简单粗暴的方式测试了，但是覆盖率还是100%。(根据questasim的report判断的)</p><h5 id="测试代码alu-tb-sv"><a href="#测试代码alu-tb-sv" class="headerlink" title="测试代码alu_tb.sv"></a>测试代码alu_tb.sv</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">``<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"><span class="comment">// mapped timing needs this. 1ns is too fast</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1 ns / 1 ns</span></span><br><span class="line"><span class="keyword">module</span> alu_tb();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">logic</span> CLK = <span class="number">0</span>, nRST;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] portA;</span><br><span class="line">  <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] portB;</span><br><span class="line">  <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] aluOP;</span><br><span class="line">  <span class="keyword">logic</span> negFlag;</span><br><span class="line">  <span class="keyword">logic</span> oveFlag;</span><br><span class="line">  <span class="keyword">logic</span> zerFlag;</span><br><span class="line">  <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] i;</span><br><span class="line">  <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] outputPort;</span><br><span class="line">  <span class="keyword">always</span> <span class="variable">#(PERIOD/2)</span> CLK++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line">  <span class="comment">// test program</span></span><br><span class="line">  <span class="comment">//test PROG (portA,portB,aluOP,negFlag,oveFlag,negFlag,zerFlag,outputPort);</span></span><br><span class="line">  <span class="comment">// DUT</span></span><br><span class="line"> </span><br><span class="line">  alu DUT(portA,portB,aluOP,negFlag,oveFlag,zerFlag,outputPort);</span><br><span class="line">  <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">portA = &#x27;<span class="number">0</span>;</span><br><span class="line">portB = &#x27;<span class="number">0</span>;</span><br><span class="line">aluOP = &#x27;<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = &#x27;<span class="number">1</span>;</span><br><span class="line">portB = &#x27;<span class="number">1</span>;</span><br><span class="line">aluOP = i;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = <span class="number">0</span>;</span><br><span class="line">portB = <span class="number">0</span>;</span><br><span class="line">aluOP = i;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = <span class="number">1</span>;</span><br><span class="line">portB = <span class="number">0</span>;</span><br><span class="line">aluOP = i;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = <span class="number">0</span>;</span><br><span class="line">portB = <span class="number">1</span>;</span><br><span class="line">aluOP = i;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = &#x27;<span class="number">0</span>;</span><br><span class="line">portB = &#x27;<span class="number">0</span>;</span><br><span class="line">aluOP = i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = &#x27;<span class="number">0</span>;</span><br><span class="line">portB = &#x27;<span class="number">0</span>;</span><br><span class="line">aluOP = &#x27;<span class="number">1</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">portA = &#x27;<span class="number">0</span>;</span><br><span class="line">portB = &#x27;<span class="number">0</span>;</span><br><span class="line">aluOP = <span class="number">0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`</p><h5 id="FPGA代码alu-fpga-sv"><a href="#FPGA代码alu-fpga-sv" class="headerlink" title="FPGA代码alu_fpga.sv"></a>FPGA代码alu_fpga.sv</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`/*</span></span><br><span class="line">  Eric Villasenor</span><br><span class="line"></span><br><span class="line">  register file fpga wrapper</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> alu_fpga (</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span> CLOCK_50,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>] KEY,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">17</span>:<span class="number">0</span>] SW,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">17</span>:<span class="number">0</span>] LEDR,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">6</span>:<span class="number">0</span>]  HEX0,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">6</span>:<span class="number">0</span>]  HEX1,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">6</span>:<span class="number">0</span>]  HEX2,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">6</span>:<span class="number">0</span>]  HEX3</span><br><span class="line">);</span><br><span class="line"><span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"><span class="keyword">logic</span> negFlag;</span><br><span class="line"><span class="keyword">logic</span> oveFlag;</span><br><span class="line"><span class="keyword">logic</span> zerFlag;</span><br><span class="line"><span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] output1;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] register;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] nregister;</span><br><span class="line"><span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] portA;</span><br><span class="line"><span class="keyword">assign</span> portA = &#123;<span class="number">16</span>*&#123;SW[<span class="number">16</span>]&#125;,SW[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line"><span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> CLOCK_50) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> (SW[<span class="number">17</span>])</span><br><span class="line">register &lt;= &#123;<span class="number">16</span>*&#123;SW[<span class="number">16</span>]&#125;,SW[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">register &lt;= register;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">alu DUT(<span class="variable">.portA</span>(portA),<span class="variable">.portB</span>(register),<span class="variable">.aluOP</span>(~KEY),<span class="variable">.negFlag</span>(negFlag),<span class="variable">.oveFlag</span>(oveFlag),<span class="variable">.zerFlag</span>(zerFlag),<span class="variable">.outputPort</span>(output1));<span class="comment">//map 版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always_comb</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"> <span class="keyword">unique</span> <span class="keyword">casez</span> (output1[<span class="number">3</span>:<span class="number">0</span>])<span class="comment">//led显示设置</span></span><br><span class="line">      <span class="number">&#x27;h0</span>: HEX0 = <span class="number">7&#x27;b1000000</span>;</span><br><span class="line">      <span class="number">&#x27;h1</span>: HEX0 = <span class="number">7&#x27;b1111001</span>;</span><br><span class="line">      <span class="number">&#x27;h2</span>: HEX0 = <span class="number">7&#x27;b0100100</span>;</span><br><span class="line">      <span class="number">&#x27;h3</span>: HEX0 = <span class="number">7&#x27;b0110000</span>;</span><br><span class="line">      <span class="number">&#x27;h4</span>: HEX0 = <span class="number">7&#x27;b0011001</span>;</span><br><span class="line">      <span class="number">&#x27;h5</span>: HEX0 = <span class="number">7&#x27;b0010010</span>;</span><br><span class="line">      <span class="number">&#x27;h6</span>: HEX0 = <span class="number">7&#x27;b0000010</span>;</span><br><span class="line">      <span class="number">&#x27;h7</span>: HEX0 = <span class="number">7&#x27;b1111000</span>;</span><br><span class="line">      <span class="number">&#x27;h8</span>: HEX0 = <span class="number">7&#x27;b0000000</span>;</span><br><span class="line">      <span class="number">&#x27;h9</span>: HEX0 = <span class="number">7&#x27;b0010000</span>;</span><br><span class="line">      <span class="number">&#x27;ha</span>: HEX0 = <span class="number">7&#x27;b0001000</span>;</span><br><span class="line">      <span class="number">&#x27;hb</span>: HEX0 = <span class="number">7&#x27;b0000011</span>;</span><br><span class="line">      <span class="number">&#x27;hc</span>: HEX0 = <span class="number">7&#x27;b0100111</span>;</span><br><span class="line">      <span class="number">&#x27;hd</span>: HEX0 = <span class="number">7&#x27;b0100001</span>;</span><br><span class="line">      <span class="number">&#x27;he</span>: HEX0 = <span class="number">7&#x27;b0000110</span>;</span><br><span class="line">      <span class="number">&#x27;hf</span>: HEX0 = <span class="number">7&#x27;b0001110</span>;</span><br><span class="line"><span class="keyword">default</span>: HEX0 = <span class="number">7&#x27;b1000000</span>; <span class="comment">// &quot;0&quot; </span></span><br><span class="line"> <span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">unique</span> <span class="keyword">casez</span> (output1[<span class="number">7</span>:<span class="number">4</span>])</span><br><span class="line">      <span class="number">&#x27;h0</span>: HEX1 = <span class="number">7&#x27;b1000000</span>;</span><br><span class="line">      <span class="number">&#x27;h1</span>: HEX1 = <span class="number">7&#x27;b1111001</span>;</span><br><span class="line">      <span class="number">&#x27;h2</span>: HEX1 = <span class="number">7&#x27;b0100100</span>;</span><br><span class="line">      <span class="number">&#x27;h3</span>: HEX1 = <span class="number">7&#x27;b0110000</span>;</span><br><span class="line">      <span class="number">&#x27;h4</span>: HEX1 = <span class="number">7&#x27;b0011001</span>;</span><br><span class="line">      <span class="number">&#x27;h5</span>: HEX1 = <span class="number">7&#x27;b0010010</span>;</span><br><span class="line">      <span class="number">&#x27;h6</span>: HEX1 = <span class="number">7&#x27;b0000010</span>;</span><br><span class="line">      <span class="number">&#x27;h7</span>: HEX1 = <span class="number">7&#x27;b1111000</span>;</span><br><span class="line">      <span class="number">&#x27;h8</span>: HEX1 = <span class="number">7&#x27;b0000000</span>;</span><br><span class="line">      <span class="number">&#x27;h9</span>: HEX1 = <span class="number">7&#x27;b0010000</span>;</span><br><span class="line">      <span class="number">&#x27;ha</span>: HEX1 = <span class="number">7&#x27;b0001000</span>;</span><br><span class="line">      <span class="number">&#x27;hb</span>: HEX1 = <span class="number">7&#x27;b0000011</span>;</span><br><span class="line">      <span class="number">&#x27;hc</span>: HEX1 = <span class="number">7&#x27;b0100111</span>;</span><br><span class="line">      <span class="number">&#x27;hd</span>: HEX1 = <span class="number">7&#x27;b0100001</span>;</span><br><span class="line">      <span class="number">&#x27;he</span>: HEX1 = <span class="number">7&#x27;b0000110</span>;</span><br><span class="line">      <span class="number">&#x27;hf</span>: HEX1 = <span class="number">7&#x27;b0001110</span>;</span><br><span class="line"><span class="keyword">default</span>: HEX1 = <span class="number">7&#x27;b1000000</span>; <span class="comment">// &quot;0&quot; </span></span><br><span class="line"> <span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">unique</span> <span class="keyword">casez</span> (output1[<span class="number">11</span>:<span class="number">8</span>])</span><br><span class="line">      <span class="number">&#x27;h0</span>: HEX2 = <span class="number">7&#x27;b1000000</span>;</span><br><span class="line">      <span class="number">&#x27;h1</span>: HEX2 = <span class="number">7&#x27;b1111001</span>;</span><br><span class="line">      <span class="number">&#x27;h2</span>: HEX2 = <span class="number">7&#x27;b0100100</span>;</span><br><span class="line">      <span class="number">&#x27;h3</span>: HEX2 = <span class="number">7&#x27;b0110000</span>;</span><br><span class="line">      <span class="number">&#x27;h4</span>: HEX2 = <span class="number">7&#x27;b0011001</span>;</span><br><span class="line">      <span class="number">&#x27;h5</span>: HEX2 = <span class="number">7&#x27;b0010010</span>;</span><br><span class="line">      <span class="number">&#x27;h6</span>: HEX2 = <span class="number">7&#x27;b0000010</span>;</span><br><span class="line">      <span class="number">&#x27;h7</span>: HEX2 = <span class="number">7&#x27;b1111000</span>;</span><br><span class="line">      <span class="number">&#x27;h8</span>: HEX2 = <span class="number">7&#x27;b0000000</span>;</span><br><span class="line">      <span class="number">&#x27;h9</span>: HEX2 = <span class="number">7&#x27;b0010000</span>;</span><br><span class="line">      <span class="number">&#x27;ha</span>: HEX2 = <span class="number">7&#x27;b0001000</span>;</span><br><span class="line">      <span class="number">&#x27;hb</span>: HEX2 = <span class="number">7&#x27;b0000011</span>;</span><br><span class="line">      <span class="number">&#x27;hc</span>: HEX2 = <span class="number">7&#x27;b0100111</span>;</span><br><span class="line">      <span class="number">&#x27;hd</span>: HEX2 = <span class="number">7&#x27;b0100001</span>;</span><br><span class="line">      <span class="number">&#x27;he</span>: HEX2 = <span class="number">7&#x27;b0000110</span>;</span><br><span class="line">      <span class="number">&#x27;hf</span>: HEX2 = <span class="number">7&#x27;b0001110</span>;</span><br><span class="line"><span class="keyword">default</span>: HEX2 = <span class="number">7&#x27;b1000000</span>; <span class="comment">// &quot;0&quot; </span></span><br><span class="line"> <span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">unique</span> <span class="keyword">case</span>(output1[<span class="number">15</span>:<span class="number">12</span>])</span><br><span class="line">      <span class="number">&#x27;h0</span>: HEX3 = <span class="number">7&#x27;b1000000</span>;</span><br><span class="line">      <span class="number">&#x27;h1</span>: HEX3 = <span class="number">7&#x27;b1111001</span>;</span><br><span class="line">      <span class="number">&#x27;h2</span>: HEX3 = <span class="number">7&#x27;b0100100</span>;</span><br><span class="line">      <span class="number">&#x27;h3</span>: HEX3 = <span class="number">7&#x27;b0110000</span>;</span><br><span class="line">      <span class="number">&#x27;h4</span>: HEX3 = <span class="number">7&#x27;b0011001</span>;</span><br><span class="line">      <span class="number">&#x27;h5</span>: HEX3 = <span class="number">7&#x27;b0010010</span>;</span><br><span class="line">      <span class="number">&#x27;h6</span>: HEX3 = <span class="number">7&#x27;b0000010</span>;</span><br><span class="line">      <span class="number">&#x27;h7</span>: HEX3 = <span class="number">7&#x27;b1111000</span>;</span><br><span class="line">      <span class="number">&#x27;h8</span>: HEX3 = <span class="number">7&#x27;b0000000</span>;</span><br><span class="line">      <span class="number">&#x27;h9</span>: HEX3 = <span class="number">7&#x27;b0010000</span>;</span><br><span class="line">      <span class="number">&#x27;ha</span>: HEX3 = <span class="number">7&#x27;b0001000</span>;</span><br><span class="line">      <span class="number">&#x27;hb</span>: HEX3 = <span class="number">7&#x27;b0000011</span>;</span><br><span class="line">      <span class="number">&#x27;hc</span>: HEX3 = <span class="number">7&#x27;b0100111</span>;</span><br><span class="line">      <span class="number">&#x27;hd</span>: HEX3 = <span class="number">7&#x27;b0100001</span>;</span><br><span class="line">      <span class="number">&#x27;he</span>: HEX3 = <span class="number">7&#x27;b0000110</span>;</span><br><span class="line">      <span class="number">&#x27;hf</span>: HEX3 = <span class="number">7&#x27;b0001110</span>;</span><br><span class="line"><span class="keyword">default</span>: HEX3 = <span class="number">7&#x27;b1000000</span>; <span class="comment">// &quot;0&quot; </span></span><br><span class="line"> <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> LEDR[<span class="number">17</span>:<span class="number">14</span>] = portA[<span class="number">3</span>:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> LEDR[<span class="number">13</span>:<span class="number">10</span>] = register[<span class="number">3</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">assign</span> LEDR[<span class="number">0</span>] = negFlag;</span><br><span class="line"><span class="keyword">assign</span> LEDR[<span class="number">1</span>] = oveFlag;</span><br><span class="line"><span class="keyword">assign</span> LEDR[<span class="number">2</span>] = zerFlag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`借此alu逻辑算术单元也算完成了。</p>]]></content>
      
      
      <categories>
          
          <category> mips CPU design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> verilog </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>singlecycle设计及实现1(register file寄存器)</title>
      <link href="/2020/03/20/singlecycle_rf/"/>
      <url>/2020/03/20/singlecycle_rf/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这篇博文主要介绍的是基于mips的 singlecycle CPU设计及实现。</p><span id="more"></span><h3 id="RTL-图像"><a href="#RTL-图像" class="headerlink" title="RTL 图像"></a>RTL 图像</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1584759605/datapath_jchv0c.png"><br>因为刚开始写的时候只考虑了mips最基础的指令，没有考虑lui和跳转等指令，所以这是一个非常粗略的图像。主要由几个大块组成，register file寄存器，ALU算术逻辑单元，memory储存，control unit控制单元，instruction fetch指令获取单元，PC 程序计数器和decoder。由于decoder已经编写，所以这次设计直接从储存中读取opcode来识别指令，iload来识别各个寄存器的地址。接下来一一介绍每个单元。</p><h4 id="register-file-寄存器"><a href="#register-file-寄存器" class="headerlink" title="register file 寄存器"></a>register file 寄存器</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1584760463/registerDiagram_djizyf.png"><br>如图所示上图展示了寄存器的一些输入及输出。<br>输入:<br>WDAT(31:0) 32位的输入<br>WSEL(4:0) 寄存器地址选择<br>WEN 寄存器开关 1:开 0:关<br>CLK 寄存器时钟<br>RSEL1(4:0) 数据总线1 地址选择<br>RSEL2(4:0) 数据总线2 地址选择<br>输出:<br>RDAT1(31:0) 数据总线1值<br>RDAT2(31:0) 数据总线2值</p><p>以前写verilog代码的时候，并没有用过接口，这次因为是要求，所以更具接口的方式来编写。</p><h5 id="主代码register-file-sv"><a href="#主代码register-file-sv" class="headerlink" title="主代码register_file.sv"></a>主代码register_file.sv</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">``<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh”//cpu总接口文件</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;register_file_if.vh”//寄存器接口文件</span></span><br><span class="line"><span class="keyword">module</span> register_file</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> CLK, nRST,</span><br><span class="line">register_file_if<span class="variable">.rf</span> rfif<span class="comment">//接口中 rf端口</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mips有32个32位的寄存器，并且需要放入reg</span></span><br><span class="line"><span class="keyword">reg</span> \[<span class="number">31</span>:<span class="number">0</span>]\[<span class="number">31</span>:<span class="number">0</span>] register;<span class="comment">//输出的寄存器</span></span><br><span class="line"><span class="keyword">reg</span> \[<span class="number">31</span>:<span class="number">0</span>]\[<span class="number">31</span>:<span class="number">0</span>] nregister;<span class="comment">//输入的寄存器</span></span><br><span class="line"><span class="keyword">always</span>\<span class="number">_</span>comb <span class="keyword">begin</span></span><br><span class="line">nregister = register;</span><br><span class="line"><span class="keyword">if</span> (rfif<span class="variable">.WEN</span> &amp;&amp; rfif<span class="variable">.wsel</span> != <span class="number">0</span>) <span class="keyword">begin</span><span class="comment">//mips 0寄存器不能修改并且要在打开的情况才能修改</span></span><br><span class="line">    nregister[rfif<span class="variable">.wsel</span>] = rfif<span class="variable">.wdat</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">rfif<span class="variable">.rdat1</span> = register[rfif<span class="variable">.rsel1</span>];</span><br><span class="line">rfif<span class="variable">.rdat2</span> = register[rfif<span class="variable">.rsel2</span>];   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>\<span class="number">_</span>ff @(<span class="keyword">posedge</span> CLK, <span class="keyword">negedge</span> nRST) <span class="keyword">begin</span><span class="comment">//异步同步</span></span><br><span class="line"><span class="keyword">if</span> (!nRST)</span><br><span class="line">    register &lt;= &#x27;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    register &lt;= nregister;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>`</p><h5 id="接口代码register-file-if-vh"><a href="#接口代码register-file-if-vh" class="headerlink" title="接口代码register_file_if.vh"></a>接口代码register_file_if.vh</h5> <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`/*</span></span><br><span class="line">  Eric Villasenor</span><br><span class="line"></span><br><span class="line">  register file <span class="keyword">interface</span></span><br><span class="line">*/</span><br><span class="line"><span class="meta">`<span class="meta-keyword">ifndef</span> REGISTER_FILE_IF_VH</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">define</span> REGISTER_FILE_IF_VH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// all types</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> &quot;cpu_types_pkg.vh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> register_file_if;</span><br><span class="line">  <span class="comment">// import types</span></span><br><span class="line">  <span class="keyword">import</span> cpu_types_pkg::*;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">logic</span>     WEN;</span><br><span class="line">  regbits_t wsel, rsel1, rsel2;<span class="comment">//在cpu_types_pkg.vh中定义 5，2^5 = 32</span></span><br><span class="line">  word_t    wdat, rdat1, rdat2;<span class="comment">//在cpu_types_pkg.vh中定义32</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// register file ports</span></span><br><span class="line">  <span class="keyword">modport</span> rf (</span><br><span class="line">    <span class="keyword">input</span>   WEN, wsel, rsel1, rsel2, wdat,</span><br><span class="line">    <span class="keyword">output</span>  rdat1, rdat2</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// register file tb</span></span><br><span class="line">  <span class="keyword">modport</span> tb (</span><br><span class="line">    <span class="keyword">input</span>   rdat1, rdat2,</span><br><span class="line">    <span class="keyword">output</span>  WEN, wsel, rsel1, rsel2, wdat</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">endinterface</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span> //REGISTER_FILE_IF_VH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`</p><h5 id="测试代码register-file-tb-sv"><a href="#测试代码register-file-tb-sv" class="headerlink" title="测试代码register_file_tb.sv"></a>测试代码register_file_tb.sv</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`/\*</span></span><br><span class="line"> Eric Villasenor</span><br><span class="line"></span><br><span class="line"> register file test bench</span><br><span class="line">\*/</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapped needs this</span></span><br><span class="line">\<span class="meta">`<span class="meta-keyword">include</span> &quot;register\_file\_if.vh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mapped timing needs this. 1ns is too fast</span></span><br><span class="line">\<span class="meta">`<span class="meta-keyword">timescale</span> 1 ns / 1 ns</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> register\<span class="number">_</span>file\<span class="number">_</span>tb;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">logic</span> CLK = <span class="number">0</span>, nRST;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// test vars</span></span><br><span class="line"> <span class="keyword">int</span> v1 = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">int</span> v2 = <span class="number">4721</span>;</span><br><span class="line"> <span class="keyword">int</span> v3 = <span class="number">25119</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// clock</span></span><br><span class="line"> <span class="keyword">always</span> <span class="variable">#(PERIOD/2)</span> CLK++;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// interface</span></span><br><span class="line"> register\<span class="number">_</span>file\<span class="number">_</span><span class="keyword">if</span> rfif ();</span><br><span class="line"> <span class="comment">// test program</span></span><br><span class="line"> test PROG (CLK, nRST,rfif,v1,v2,v3);</span><br><span class="line"> <span class="comment">// DUT</span></span><br><span class="line">\<span class="meta">`<span class="meta-keyword">ifndef</span> MAPPED</span></span><br><span class="line"> register\<span class="number">_</span>file DUT(CLK, nRST, rfif);</span><br><span class="line">\<span class="meta">`<span class="meta-keyword">else</span></span></span><br><span class="line"> register\<span class="number">_</span>file DUT(</span><br><span class="line">.\rfif<span class="variable">.rdat2</span> (rfif<span class="variable">.rdat2</span>),</span><br><span class="line">.\rfif<span class="variable">.rdat1</span> (rfif<span class="variable">.rdat1</span>),</span><br><span class="line">.\rfif<span class="variable">.wdat</span> (rfif<span class="variable">.wdat</span>),</span><br><span class="line">.\rfif<span class="variable">.rsel2</span> (rfif<span class="variable">.rsel2</span>),</span><br><span class="line">.\rfif<span class="variable">.rsel1</span> (rfif<span class="variable">.rsel1</span>),</span><br><span class="line">.\rfif<span class="variable">.wsel</span> (rfif<span class="variable">.wsel</span>),</span><br><span class="line">.\rfif<span class="variable">.WEN</span> (rfif<span class="variable">.WEN</span>),</span><br><span class="line">.\nRST (nRST),</span><br><span class="line">.\CLK (CLK)</span><br><span class="line"> );</span><br><span class="line">\<span class="meta">`<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">program</span> test</span><br><span class="line">(</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> CLK,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">logic</span> nRST,</span><br><span class="line"></span><br><span class="line">register\<span class="number">_</span>file\<span class="number">_</span><span class="keyword">if</span><span class="variable">.tb</span> rfif,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> \[<span class="number">31</span>:<span class="number">0</span>] v1,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> \[<span class="number">31</span>:<span class="number">0</span>] v2,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">logic</span> \[<span class="number">31</span>:<span class="number">0</span>] v3</span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] i;</span><br><span class="line">  <span class="keyword">reg</span> \[<span class="number">3</span>:<span class="number">0</span>] testcase = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">rfif<span class="variable">.wsel</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.wdat</span> = &#x27;<span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.WEN</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.rsel1</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.rsel2</span> = <span class="number">0</span>;      </span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line">rfif<span class="variable">.wsel</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.WEN</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.wdat</span> = &#x27;<span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.rsel1</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.rsel2</span> = <span class="number">1</span>;</span><br><span class="line">testcase ++;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i = i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.wsel</span> = i;</span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.rsel1</span> = i;</span><br><span class="line">    rfif<span class="variable">.rsel2</span> = <span class="number">31</span>-i;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line">rfif<span class="variable">.wsel</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.WEN</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.wdat</span> = &#x27;<span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.rsel1</span> = <span class="number">0</span>;</span><br><span class="line">rfif<span class="variable">.rsel2</span> = <span class="number">1</span>;</span><br><span class="line">testcase ++;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i = i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.wsel</span> = i;</span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.rsel1</span> = i;</span><br><span class="line">    rfif<span class="variable">.rsel2</span> = <span class="number">31</span>-i;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line">rfif<span class="variable">.wsel</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.WEN</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.wdat</span> = &#x27;<span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.rsel1</span> = <span class="number">1</span>;</span><br><span class="line">rfif<span class="variable">.rsel2</span> = <span class="number">0</span>;</span><br><span class="line">testcase ++;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i = i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.wsel</span> = i;</span><br><span class="line">    @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">    rfif<span class="variable">.rsel1</span> = i;</span><br><span class="line">    rfif<span class="variable">.rsel2</span> = <span class="number">31</span>-i;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">nRST = <span class="number">1&#x27;b0</span>;</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line">@(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endprogram</span></span><br></pre></td></tr></table></figure><p>`测试文件用questasim来验证，本来应该用assert更规范的测试，第一次懒惰了。<br> 以上是singlecycle中寄存器文件的</p>]]></content>
      
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> verilog </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python douyu 礼物统计</title>
      <link href="/2019/12/20/liwu/"/>
      <url>/2019/12/20/liwu/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近看有主播进行礼物的手动统计，感觉实在是有点费功夫于是尝试提升效率。首先在下实在不熟悉API，并且TCP了解的也比较肤浅，所以打算更具每次直播聊天的文本进行提取信息来统计礼物数。</p><span id="more"></span><h2 id="具体实践顺序"><a href="#具体实践顺序" class="headerlink" title="具体实践顺序"></a>具体实践顺序</h2><h3 id="1-查看文本格式"><a href="#1-查看文本格式" class="headerlink" title="1. 查看文本格式"></a>1. 查看文本格式</h3><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1576809787/31576809495_.pic_hd_nhzean.png"><br>格式如上所示。由于直播方正好开了礼物感谢的方式，每一次收礼物都能进行文本抓取。<br>但是里面有一些比较特殊的礼物格式，例如下图。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1576810007/41576809989_.pic_hd_izzax5.jpg"><br>由于送礼物会出现连击的现象，在短时间内送出多个相同的礼物会出现连击的效果。其实只有六次而不是1+2+…+6次。但是又不能根据每一次连击效果进行简单的礼物数加一，因为存在一次性送礼物，并且不同的礼物类型会有不同的选项。</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>如果能赠送办卡会有如下的选项。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1576810240/61576810220_.pic_xt0x06.jpg"><br>x10，x66, x366,x520,x1314等选项。<br>所以存在一次叠加超过一次的情况。</p><h3 id="2-查看需要抓取的格式"><a href="#2-查看需要抓取的格式" class="headerlink" title="2. 查看需要抓取的格式"></a>2. 查看需要抓取的格式</h3><p>根据前面几幅图，礼物送出后有如下体现。<br>【主播 ID】： 感谢。【送礼者ID】  送出的 【礼物类型】x【数量】<br>就可以根据简单的正则表达式进行抓取。但是由于是中文的原因，折腾了一个小时，包括文本log文件的转码（因为在mac上显示全是乱码），包括正则表达式中的乱码，最后还包括送礼者ID的群魔乱舞，可能包含各种特殊符号或文字。</p><h3 id="3-完整编码"><a href="#3-完整编码" class="headerlink" title="3. 完整编码"></a>3. 完整编码</h3><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>\<span class="title">_liwu</span>():</span></span><br><span class="line">filename = os.listdir(<span class="string">&#x27;logfile&#x27;</span>)</span><br><span class="line">filepath = []</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> filename:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(element.split(<span class="string">&#x27;.txt&#x27;</span>)) &gt;= <span class="number">2</span>:</span><br><span class="line">        <span class="comment">#print element</span></span><br><span class="line">        filepath.append(element)</span><br><span class="line">feiji = <span class="string">&#x27;飞机&#x27;</span></span><br><span class="line">banka = <span class="string">&#x27;办卡&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">bankadic = &#123;&#125;</span><br><span class="line">feijidic = &#123;&#125;</span><br><span class="line">g = <span class="number">0</span></span><br><span class="line">num = [<span class="number">0</span>]</span><br><span class="line">patternbanka = unicode(<span class="string">&#x27;感谢 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+<span class="string">u&#x27;[\u4e00-\u9fa5\d\w]+&#x27;</span>+unicode(<span class="string">&#x27; 送出的 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+unicode(banka,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+<span class="string">&#x27;[x][\d]+&#x27;</span></span><br><span class="line">patternfeiji = unicode(<span class="string">&#x27;感谢 &#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) + <span class="string">u&#x27;[\u4e00-\u9fa5\d\w]+&#x27;</span> + unicode(<span class="string">&#x27; 送出的 &#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) + unicode(feiji, <span class="string">&#x27;utf8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) + <span class="string">&#x27;[x][\d]+&#x27;</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(filepath):</span><br><span class="line">    path = <span class="string">&#x27;logfile/&#x27;</span> + filepath[i]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> f:</span><br><span class="line">        loglines = f.read().splitlines()</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(loglines):</span><br><span class="line">        line = unicode(loglines[j], <span class="string">&quot;utf8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">        answer = re.findall(patternbanka,line)</span><br><span class="line">        answer1 = re.findall(patternfeiji,line)</span><br><span class="line">        <span class="comment">#print(answer)</span></span><br><span class="line">        <span class="keyword">if</span> answer:</span><br><span class="line">            <span class="comment">#print len(answer)</span></span><br><span class="line">            g += <span class="number">1</span></span><br><span class="line">            <span class="comment">#print(answer[0])</span></span><br><span class="line">            prev = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">            patternName = <span class="string">u&#x27;(?P&lt;name&gt;[\u4e00-\u9fa5\d\w]+)&#x27;</span>+unicode(<span class="string">&#x27; 送出的 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            name = re.findall(patternName,answer[<span class="number">0</span>])</span><br><span class="line">            patternNum = unicode(banka,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+<span class="string">&#x27;[x](?P&lt;num&gt;[\d]+)&#x27;</span></span><br><span class="line">            num = re.findall(patternNum,answer[<span class="number">0</span>])</span><br><span class="line">            num1 = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">            <span class="comment">#print name[0], num1, prev</span></span><br><span class="line">            <span class="keyword">if</span> name[<span class="number">0</span>] <span class="keyword">in</span> bankadic.keys():</span><br><span class="line">                <span class="keyword">if</span> num1 == <span class="number">1</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">10</span> <span class="keyword">and</span> prev != <span class="number">9</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">10</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">66</span> <span class="keyword">and</span> prev != <span class="number">65</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">66</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">366</span> <span class="keyword">and</span> prev != <span class="number">365</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">366</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">520</span> <span class="keyword">and</span> prev != <span class="number">519</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">520</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">1314</span> <span class="keyword">and</span> prev != <span class="number">1313</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1314</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bankadic[name[<span class="number">0</span>]] = num1</span><br><span class="line">        <span class="keyword">if</span> answer1:</span><br><span class="line">            <span class="comment">#print len(answer)</span></span><br><span class="line">            g += <span class="number">1</span></span><br><span class="line">            <span class="comment">#print(answer[0])</span></span><br><span class="line">            prev = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">            patternName = <span class="string">u&#x27;(?P&lt;name&gt;[\u4e00-\u9fa5\d\w]+)&#x27;</span>+unicode(<span class="string">&#x27; 送出的 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            name = re.findall(patternName,answer1[<span class="number">0</span>])</span><br><span class="line">            patternNum = unicode(feiji,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+<span class="string">&#x27;[x](?P&lt;num&gt;[\d]+)&#x27;</span></span><br><span class="line">            num = re.findall(patternNum,answer1[<span class="number">0</span>])</span><br><span class="line">            num1 = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">            <span class="comment">#print name[0], num1, prev</span></span><br><span class="line">            <span class="keyword">if</span> name[<span class="number">0</span>] <span class="keyword">in</span> feijidic.keys():</span><br><span class="line">                <span class="keyword">if</span> num1 == <span class="number">1</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">10</span> <span class="keyword">and</span> prev != <span class="number">9</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">10</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">66</span> <span class="keyword">and</span> prev != <span class="number">65</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">66</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">366</span> <span class="keyword">and</span> prev != <span class="number">365</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">366</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">520</span> <span class="keyword">and</span> prev != <span class="number">519</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">520</span></span><br><span class="line">                <span class="keyword">elif</span> num1 == <span class="number">1314</span> <span class="keyword">and</span> prev != <span class="number">1313</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1314</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                feijidic[name[<span class="number">0</span>]] = num1</span><br><span class="line">        j+= <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment">#print bankadic.keys()[1], bankadic[bankadic.keys()[1]]</span></span><br><span class="line"><span class="comment">#print feijidic</span></span><br><span class="line">f = codecs.<span class="built_in">open</span>(<span class="string">&#x27;liwu.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#print bankadic.keys()[0]</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (<span class="built_in">len</span>(bankadic)):</span><br><span class="line">    <span class="keyword">if</span> bankadic.keys()[i] <span class="keyword">in</span> feijidic.keys():</span><br><span class="line">        f.write(bankadic.keys()[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[bankadic.keys()[i]])+unicode(<span class="string">&#x27; 办卡 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(feijidic[bankadic.keys()[i]])+ unicode(<span class="string">&#x27; 飞机&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) +unicode(<span class="string">&#x27; 价值 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(bankadic[bankadic.keys()[i]]*<span class="number">6</span>+feijidic[bankadic.keys()[i]]*<span class="number">100</span>)+ <span class="string">&#x27; &#x27;</span><span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f.write(bankadic.keys()[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[bankadic.keys()[i]])+unicode(<span class="string">&#x27; 办卡&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+  unicode(<span class="string">&#x27; 0  飞机&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+unicode(<span class="string">&#x27; 价值 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(bankadic[bankadic.keys()[i]]*<span class="number">6</span>) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (<span class="built_in">len</span>(feijidic)):</span><br><span class="line">    <span class="keyword">if</span> feijidic.keys()[i] <span class="keyword">in</span> bankadic.keys():</span><br><span class="line">        f.write(feijidic.keys()[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[feijidic.keys()[i]])+ unicode(<span class="string">&#x27; 办卡 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(feijidic[feijidic.keys()[i]])+unicode(<span class="string">&#x27; 飞机 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) +unicode(<span class="string">&#x27; 价值 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(bankadic[feijidic.keys()[i]]*<span class="number">6</span>+feijidic[feijidic.keys()[i]]*<span class="number">100</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f.write(feijidic.keys()[i] + <span class="string">&#x27; &#x27;</span>+ unicode(<span class="string">&#x27; 0 办卡 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(feijidic[feijidic.keys()[i]])+unicode(<span class="string">&#x27; 飞机&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)  +unicode(<span class="string">&#x27; 价值 &#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)+ <span class="built_in">str</span>(feijidic[feijidic.keys()[i]]*<span class="number">100</span>) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">start_time = time.time()</span><br><span class="line">a = find_liwu()</span><br><span class="line"><span class="comment">#a = &#x27;x5&#x27;</span></span><br><span class="line"><span class="comment">#pattern = r&#x27;[x][\d]&#x27;</span></span><br><span class="line"><span class="comment">#a2=re.findall(pattern,a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--- %s seconds ---&quot;</span> % (time.time() - start_time))</span><br><span class="line">filename = os.listdir(<span class="string">&#x27;logfile&#x27;</span>)</span><br></pre></td></tr></table></figure><p>`</p><h4 id="4-结果输出"><a href="#4-结果输出" class="headerlink" title="4. 结果输出"></a>4. 结果输出</h4><p><img src="https://res.cloudinary.com/djyodckal/image/upload/v1576811179/71576811153_.pic_hd_lp9y00.jpg"><br>这篇文本中的所有ID都能抓取到，连 xxx丶xx格式的ID也能抓取所以抓取的面应该是比较广的。</p><h4 id="5-GUI-界面"><a href="#5-GUI-界面" class="headerlink" title="5. GUI 界面"></a>5. GUI 界面</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>由于是给新手用的，所以打算建立一个GUI互动界面。结果做完了才想起来，新手甚至没有python和GUI的库，所以应该运行不了。。。<br>在pyqt4中进行了UI的绘制，再通过pyqt5 BasicUI.ui -o BasicUI.py 进行转换。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>UI源文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;liwu.ui&#x27;</span></span><br><span class="line">\<span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.7.1</span></span><br><span class="line">\<span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui</span>\<span class="title">_MainWindow</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">    MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">    MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">    self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">    self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">    self.pushButton.setGeometry(QtCore.QRect(<span class="number">350</span>, <span class="number">240</span>, <span class="number">92</span>, <span class="number">27</span>))</span><br><span class="line">    self.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">    MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">    self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">    self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">25</span>))</span><br><span class="line">    self.menubar.setObjectName(<span class="string">&quot;menubar&quot;</span>)</span><br><span class="line">    MainWindow.setMenuBar(self.menubar)</span><br><span class="line">    self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">    self.statusbar.setObjectName(<span class="string">&quot;statusbar&quot;</span>)</span><br><span class="line">    MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">    self.retranslateUi(MainWindow)</span><br><span class="line">    QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">    _translate = QtCore.QCoreApplication.translate</span><br><span class="line">    MainWindow.setWindowTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;MainWindow&quot;</span>))</span><br><span class="line">    self.pushButton.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;liwu&quot;</span>))</span><br></pre></td></tr></table></figure><p>`</p><p>以及UI的引用文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication, QFileDialog</span><br><span class="line"><span class="keyword">from</span> liwu <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#from pyparsing import unicode</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> unicode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"><span class="comment">#   Author:     &lt;Your Full Name&gt;</span></span><br><span class="line"><span class="comment">#   email:      &lt;Your Email&gt;</span></span><br><span class="line"><span class="comment">#   ID:         &lt;Your course ID, e.g. ee364j20&gt;</span></span><br><span class="line"><span class="comment">#   Date:       &lt;Start Date&gt;</span></span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">QMainWindow, Ui_MainWindow</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Consumer, self).__init__(parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.pushButton.clicked.connect(self.find_liwu)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_liwu</span>(<span class="params">self</span>):</span></span><br><span class="line">        filename = os.listdir(<span class="string">&#x27;logfile&#x27;</span>)</span><br><span class="line">        filepath = []</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(element.split(<span class="string">&#x27;.txt&#x27;</span>)) &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="comment">#print element</span></span><br><span class="line">                filepath.append(element)</span><br><span class="line">        feiji = <span class="string">&#x27;飞机&#x27;</span></span><br><span class="line">        banka = <span class="string">&#x27;办卡&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        bankadic = &#123;&#125;</span><br><span class="line">        feijidic = &#123;&#125;</span><br><span class="line">        g = <span class="number">0</span></span><br><span class="line">        num = [<span class="number">0</span>]</span><br><span class="line">        patternbanka = <span class="built_in">str</span>(<span class="string">&#x27;感谢 &#x27;</span>)+<span class="string">u&#x27;[\u4e00-\u9fa5\d\w]+&#x27;</span>+<span class="built_in">str</span>(<span class="string">&#x27; 送出的 &#x27;</span>)+<span class="built_in">str</span>(banka)+<span class="string">&#x27;[x][\d]+&#x27;</span></span><br><span class="line">        patternfeiji = <span class="built_in">str</span>(<span class="string">&#x27;感谢 &#x27;</span>) + <span class="string">u&#x27;[\u4e00-\u9fa5\d\w]+&#x27;</span> + <span class="built_in">str</span>(<span class="string">&#x27; 送出的 &#x27;</span>) + <span class="built_in">str</span>(feiji) + <span class="string">&#x27;[x][\d]+&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(filepath):</span><br><span class="line">            path = <span class="string">&#x27;logfile/&#x27;</span> + filepath[i]</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> f:</span><br><span class="line">                loglines = f.read().splitlines()</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(loglines):</span><br><span class="line">                line = <span class="built_in">str</span>(loglines[j])</span><br><span class="line">                answer = re.findall(patternbanka,line)</span><br><span class="line">                answer1 = re.findall(patternfeiji,line)</span><br><span class="line">                <span class="comment">#print(answer)</span></span><br><span class="line">                <span class="keyword">if</span> answer:</span><br><span class="line">                <span class="comment">#print len(answer)</span></span><br><span class="line">                    g += <span class="number">1</span></span><br><span class="line">                    <span class="comment">#print(answer[0])</span></span><br><span class="line">                    prev = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">                    patternName = <span class="string">u&#x27;(?P&lt;name&gt;[\u4e00-\u9fa5\d\w]+)&#x27;</span>+<span class="built_in">str</span>(<span class="string">&#x27; 送出的 &#x27;</span>)</span><br><span class="line">                    name = re.findall(patternName,answer[<span class="number">0</span>])</span><br><span class="line">                    patternNum = <span class="built_in">str</span>(banka)+<span class="string">&#x27;[x](?P&lt;num&gt;[\d]+)&#x27;</span></span><br><span class="line">                    num = re.findall(patternNum,answer[<span class="number">0</span>])</span><br><span class="line">                    num1 = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">                    <span class="comment">#print name[0], num1, prev</span></span><br><span class="line">                    <span class="keyword">if</span> name[<span class="number">0</span>] <span class="keyword">in</span> bankadic.keys():</span><br><span class="line">                        <span class="keyword">if</span> num1 == <span class="number">1</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">10</span> <span class="keyword">and</span> prev != <span class="number">9</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">10</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">66</span> <span class="keyword">and</span> prev != <span class="number">65</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">66</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">366</span> <span class="keyword">and</span> prev != <span class="number">365</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">366</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">520</span> <span class="keyword">and</span> prev != <span class="number">519</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">520</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">1314</span> <span class="keyword">and</span> prev != <span class="number">1313</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1314</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            bankadic[name[<span class="number">0</span>]] = bankadic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        bankadic[name[<span class="number">0</span>]] = num1</span><br><span class="line">                <span class="keyword">if</span> answer1:</span><br><span class="line">                    <span class="comment">#print len(answer)</span></span><br><span class="line">                    g += <span class="number">1</span></span><br><span class="line">                    <span class="comment">#print(answer[0])</span></span><br><span class="line">                    prev = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">                    patternName = <span class="string">u&#x27;(?P&lt;name&gt;[\u4e00-\u9fa5\d\w]+)&#x27;</span>+<span class="built_in">str</span>(<span class="string">&#x27; 送出的 &#x27;</span>)</span><br><span class="line">                    name = re.findall(patternName,answer1[<span class="number">0</span>])</span><br><span class="line">                    patternNum = <span class="built_in">str</span>(feiji)+<span class="string">&#x27;[x](?P&lt;num&gt;[\d]+)&#x27;</span></span><br><span class="line">                    num = re.findall(patternNum,answer1[<span class="number">0</span>])</span><br><span class="line">                    num1 = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">                    <span class="comment">#print(name,num)</span></span><br><span class="line">                    <span class="comment">#print name[0], num1, prev</span></span><br><span class="line">                    <span class="keyword">if</span> name[<span class="number">0</span>] <span class="keyword">in</span> feijidic.keys():</span><br><span class="line">                        <span class="keyword">if</span> num1 == <span class="number">1</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">10</span> <span class="keyword">and</span> prev != <span class="number">9</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">10</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">66</span> <span class="keyword">and</span> prev != <span class="number">65</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">66</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">366</span> <span class="keyword">and</span> prev != <span class="number">365</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">366</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">520</span> <span class="keyword">and</span> prev != <span class="number">519</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">520</span></span><br><span class="line">                        <span class="keyword">elif</span> num1 == <span class="number">1314</span> <span class="keyword">and</span> prev != <span class="number">1313</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1314</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            feijidic[name[<span class="number">0</span>]] = feijidic[name[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        feijidic[name[<span class="number">0</span>]] = num1</span><br><span class="line">                j+= <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment">#print(bankadic.keys()[1], bankadic[bankadic.keys()[1]])</span></span><br><span class="line">        <span class="built_in">print</span>(feijidic)</span><br><span class="line">        f = codecs.<span class="built_in">open</span>(<span class="string">&#x27;liwu.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment">#print bankadic.keys()[0]</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; (<span class="built_in">len</span>(bankadic)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>(bankadic.keys())[i] <span class="keyword">in</span> feijidic.keys():</span><br><span class="line">                f.write(<span class="built_in">list</span>(bankadic.keys())[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[<span class="built_in">list</span>(bankadic.keys())[i]])+<span class="built_in">str</span>(<span class="string">&#x27; 办卡 &#x27;</span>)+ <span class="built_in">str</span>(feijidic[<span class="built_in">list</span>(bankadic.keys())[i]])+ <span class="built_in">str</span>(<span class="string">&#x27; 飞机&#x27;</span>) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.write(<span class="built_in">list</span>(bankadic.keys())[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[<span class="built_in">list</span>(bankadic.keys())[i]])+<span class="built_in">str</span>(<span class="string">&#x27; 办卡&#x27;</span>)+  <span class="built_in">str</span>(<span class="string">&#x27; 0  飞机&#x27;</span>) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; (<span class="built_in">len</span>(feijidic)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>(feijidic.keys())[i] <span class="keyword">in</span> bankadic.keys():</span><br><span class="line">                f.write(<span class="built_in">list</span>(feijidic.keys())[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(bankadic[<span class="built_in">list</span>(feijidic.keys())[i]])+ <span class="built_in">str</span>(<span class="string">&#x27; 办卡 &#x27;</span>)+ <span class="built_in">str</span>(feijidic[<span class="built_in">list</span>(feijidic.keys())[i]])+<span class="built_in">str</span>(<span class="string">&#x27; 飞机 &#x27;</span>) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.write(<span class="built_in">list</span>(feijidic.keys())[i] + <span class="string">&#x27; &#x27;</span>+ <span class="built_in">str</span>(<span class="string">&#x27; 0 办卡 &#x27;</span>)+ <span class="built_in">str</span>(feijidic[<span class="built_in">list</span>(feijidic.keys())[i]])+<span class="built_in">str</span>(<span class="string">&#x27; 飞机&#x27;</span>)  +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    currentApp = QApplication(sys.argv)</span><br><span class="line">    currentForm = Consumer()</span><br><span class="line"></span><br><span class="line">    currentForm.show()</span><br><span class="line">    currentApp.exec_()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结与问题"><a href="#总结与问题" class="headerlink" title="总结与问题"></a>总结与问题</h3><p>这个程序大概上能实现功能但是会遇到一下问题。</p><h4 id="1-礼物数量"><a href="#1-礼物数量" class="headerlink" title="1.礼物数量"></a>1.礼物数量</h4><p>如果送了9张办卡后 再送了10张办卡，可能只统计10张。因为程序猜测后面的x10为连击，因为x10前面为x9。这个问题可以用文本读取的方式不能有效解决。</p><p>可能可以用连击的时间来减少误算，但是再连击时间内发生还是无法避免。</p><h4 id="2-送礼者ID"><a href="#2-送礼者ID" class="headerlink" title="2.送礼者ID"></a>2.送礼者ID</h4><p>如果送礼者ID不为汉子英文和数字的话，有大几率会出现遗漏。</p><h4 id="3-程序使用"><a href="#3-程序使用" class="headerlink" title="3.程序使用"></a>3.程序使用</h4><p>该程序还是只能在搭建了环境下才能运行，较为麻烦。</p><h4 id="4-不同版本的python下转码的函数不通用"><a href="#4-不同版本的python下转码的函数不通用" class="headerlink" title="4.不同版本的python下转码的函数不通用"></a>4.不同版本的python下转码的函数不通用</h4><p>在3.7中只能支持str（）进行转码。encode（）好像不支持。</p><h4 id="5-时间"><a href="#5-时间" class="headerlink" title="5.时间"></a>5.时间</h4><p>在处理一个文本花的时间为0.0143s，所以时间应该问题不是很大。</p><h4 id="6-市面上已经有免费的支持API的网站进行查询"><a href="#6-市面上已经有免费的支持API的网站进行查询" class="headerlink" title="6.市面上已经有免费的支持API的网站进行查询"></a>6.市面上已经有免费的支持API的网站进行查询</h4><p>所以本程序在得知这个消息的时候就不怎么打算更新了。</p>]]></content>
      
      
      <categories>
          
          <category> python text </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python - project - text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux驱动练习</title>
      <link href="/2019/09/06/Linux_driver_practice/"/>
      <url>/2019/09/06/Linux_driver_practice/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>时隔近一个月，准备吧实习的内容在总结一下。这一次上具体的练习的过程。具体准备的是打算写一个简单  的在内核打印hello_world的驱动。</p><span id="more"></span><h1 id="过程介绍"><a href="#过程介绍" class="headerlink" title="过程介绍"></a>过程介绍</h1><ol><li>完成source文件</li><li>完成Makefile</li><li>加载模组，并尝试测试</li></ol><h1 id="source-文件"><a href="#source-文件" class="headerlink" title="source 文件"></a>source 文件</h1><p>以下是练习写的code，按照基本的几个函数构建的驱动模版。在退出这个驱动的时候运行了printk，在内核中打印了出来。代码如<br>```c`<br>static int __init hello_init_module(void)<br>{<br>    return misc_register(&amp;hello_miscdevice);<br>}</p><p>static void __exit hello_cleanup_module(void)<br>{    <br>    misc_deregister(&amp;hello_miscdevice);<br>    printk(KERN_ALERT”Hello__world!n”);//在内核中打印function，用printk函数<br>    //return 0;<br>}</p><p>module_init(hello_init_module);<br>module_exit(hello_cleanup_module);_</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> 上述代码表现在在卸载模块的时候，会运行打印函数，最后打印在内核中。具体看下面的完成Makefile</span><br><span class="line">在完成了source code以后，需要完成makefile进行编辑，更具需要运行的环境，选择相对应环境的编译工具</span><br><span class="line"></span><br><span class="line">```c`</span><br><span class="line">ifneq ($(KERNELRELEASE),)</span><br><span class="line"></span><br><span class="line">obj-m:=hello_new.o</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">#generate the path</span><br><span class="line"></span><br><span class="line">CURRENT_PATH:=$(shell pwd)</span><br><span class="line"></span><br><span class="line">#the absolute path</span><br><span class="line"></span><br><span class="line">LINUX_KERNEL_PATH:=/lib/modules/$(shell uname -r)/build</span><br><span class="line">#complie object</span><br><span class="line">default:</span><br><span class="line">    make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules </span><br><span class="line">clean:</span><br><span class="line">    make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) clean</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p> 以上的代码是编译内核模块的makefile代码。Linux_Kernel的地址为运行环境的内核头地址。这次编译是在unbuntu文件运行，所以就如上所示。<br>然后需要在终端输入如下指令。</p><p>```c`</p><h1 id="include-lt-linux-module-h-gt"><a href="#include-lt-linux-module-h-gt" class="headerlink" title="include &lt;linux/module.h&gt;"></a>include &lt;linux/module.h&gt;</h1><h1 id="include-lt-linux-types-h-gt"><a href="#include-lt-linux-types-h-gt" class="headerlink" title="include &lt;linux/types.h&gt;"></a>include &lt;linux/types.h&gt;</h1><h1 id="include-lt-linux-fs-h-gt"><a href="#include-lt-linux-fs-h-gt" class="headerlink" title="include &lt;linux/fs.h&gt;"></a>include &lt;linux/fs.h&gt;</h1><h1 id="include-lt-linux-version-h-gt"><a href="#include-lt-linux-version-h-gt" class="headerlink" title="include &lt;linux/version.h&gt;"></a>include &lt;linux/version.h&gt;</h1><h1 id="include-lt-linux-delay-h-gt"><a href="#include-lt-linux-delay-h-gt" class="headerlink" title="include &lt;linux/delay.h&gt;"></a>include &lt;linux/delay.h&gt;</h1><h1 id="include-lt-linux-crc32-h-gt"><a href="#include-lt-linux-crc32-h-gt" class="headerlink" title="include &lt;linux/crc32.h&gt;"></a>include &lt;linux/crc32.h&gt;</h1><h1 id="include-lt-linux-interrupt-h-gt"><a href="#include-lt-linux-interrupt-h-gt" class="headerlink" title="include &lt;linux/interrupt.h&gt;"></a>include &lt;linux/interrupt.h&gt;</h1><h1 id="include-lt-linux-init-h-gt"><a href="#include-lt-linux-init-h-gt" class="headerlink" title="include &lt;linux/init.h&gt;"></a>include &lt;linux/init.h&gt;</h1><h1 id="include-lt-linux-miscdevice-h-gt"><a href="#include-lt-linux-miscdevice-h-gt" class="headerlink" title="include &lt;linux/miscdevice.h&gt;"></a>include &lt;linux/miscdevice.h&gt;</h1><h1 id="include-lt-linux-cdev-h-gt"><a href="#include-lt-linux-cdev-h-gt" class="headerlink" title="include &lt;linux/cdev.h&gt;"></a>include &lt;linux/cdev.h&gt;</h1><h1 id="include-lt-linux-uaccess-h-gt"><a href="#include-lt-linux-uaccess-h-gt" class="headerlink" title="include &lt;linux/uaccess.h&gt;"></a>include &lt;linux/uaccess.h&gt;</h1><h1 id="define-DEV-DRIVER-NAME-“HelloDev”"><a href="#define-DEV-DRIVER-NAME-“HelloDev”" class="headerlink" title="define DEV_DRIVER_NAME        “HelloDev”"></a>define DEV_DRIVER_NAME        “HelloDev”</h1><p>char memory<a href="">50</a>;</p><p>int hello_open(struct inode * inode, struct file * file)<br>{<br>    return 0;<br>}</p><p>int hello_close(struct inode * inode, struct file * file)<br>{<br>    return 0;<br>}</p><p>ssize_t hello_read(struct file *filp, char __user *buff, size_t count, loff_t *pos)<br>{<br>    if (count &gt; strlen(memory))<br>    {<br>        count = strlen(memory);<br>    }<br>  if (count &lt; 0)<br>    {<br>        return -EINVAL;<br>    }<br>    if (copy_to_user(buff,memory,count)){<br>        return EFAULT;<br>    }</p><p>    return count;</p><p>}</p><p>ssize_t hello_write(struct file *filp, const char __user *buff, size_t count,  loff_t *pos)<br>{</p><p>if (count &gt; strlen(memory))<br>    {<br>        count = strlen(memory);<br>    }<br>  if (count &lt; 0)<br>    {<br>        return -EINVAL;<br>    }<br>    if (copy_from_user(buff,memory,count)){<br>        return EFAULT;<br>    }<br>    return count;</p><p>}</p><p>ssize_t hello_ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)<br>{<br>    return 0;<br>}</p><p>ssize_t unlocked_hello_ioctl(struct file *file, unsigned int cmd, unsigned long arg)<br>{<br>    return hello_ioctl(NULL, file, cmd, arg);<br>}</p><p>static struct file_operations hello_fops = {<br>    .owner            = THIS_MODULE,</p><h1 id="if-LINUX-VERSION-CODE-lt-KERNEL-VERSION-2-6-35"><a href="#if-LINUX-VERSION-CODE-lt-KERNEL-VERSION-2-6-35" class="headerlink" title="if (LINUX_VERSION_CODE &lt; KERNEL_VERSION( 2,6,35 ))"></a>if (LINUX_VERSION_CODE &lt; KERNEL_VERSION( 2,6,35 ))</h1><p>   .ioctl     = hello_ioctl,</p><h1 id="else"><a href="#else" class="headerlink" title="else"></a>else</h1><p>   .unlocked_ioctl = unlocked_hello_ioctl,</p><h1 id="endif-版本号决定ioct的不同么，但是为什么用编译条件-不直接用if"><a href="#endif-版本号决定ioct的不同么，但是为什么用编译条件-不直接用if" class="headerlink" title="endif//版本号决定ioct的不同么，但是为什么用编译条件 不直接用if"></a>endif//版本号决定ioct的不同么，但是为什么用编译条件 不直接用if</h1><p>    .open        = hello_open,<br>    .release    = hello_close,<br>    .read       = hello_read,<br>    .write      = hello_write<br>};</p><p>static struct miscdevice hello_miscdevice = {<br>    MISC_DYNAMIC_MINOR,//次设备号<br>    DEV_DRIVER_NAME,<br>    &amp;hello_fops,//这个为什么是地址的格式<br>};//.minor,.name，.fops 可以省略是吗</p><p>static int __init hello_init_module(void)<br>{<br>    return misc_register(&amp;hello_miscdevice);<br>}</p><p>static void __exit hello_cleanup_module(void)<br>{    <br>    misc_deregister(&amp;hello_miscdevice);<br>    printk(KERN_ALERT”Hello__world!n”);<br>    //return 0;<br>}</p><p>module_init(hello_init_module);<br>module_exit(hello_cleanup_module);_</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux\_driver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> driver </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核驱动介绍(2)</title>
      <link href="/2019/08/09/linux-driver2/"/>
      <url>/2019/08/09/linux-driver2/</url>
      
        <content type="html"><![CDATA[<h1 id="详情回顾"><a href="#详情回顾" class="headerlink" title="详情回顾"></a>详情回顾</h1><p>上篇讲述了用动态，静态申请设备号以及注销，今天记录剩下的部分。</p><span id="more"></span><h1 id="创建设备文件"><a href="#创建设备文件" class="headerlink" title="创建设备文件"></a>创建设备文件</h1><ul><li>手工创建</li><li>自动创建<h2 id="手工创建"><a href="#手工创建" class="headerlink" title="手工创建"></a>手工创建</h2>利用mknod 函数进行手工创建<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`mknod filename <span class="built_in">type</span> major minor</span><br></pre></td></tr></table></figure>`</li><li>filename  设备文件名字</li><li>type         设备文件类型</li><li>major       主设备号</li><li>minor       次设备号</li></ul><p><em>例子</em> mknod s3c241sel c 231 0</p><h1 id="重要的数据结构"><a href="#重要的数据结构" class="headerlink" title="重要的数据结构"></a>重要的数据结构</h1><p>在linux驱动定义里有几个比较重要额度数据结构</p><ul><li>Struct file</li><li>Struct inode</li><li>Struct file_operations<h2 id="Struct-file"><a href="#Struct-file" class="headerlink" title="Struct file"></a>Struct file</h2> 这个数据结构代表的是一个打开的文件。系统中每个打开的文件在内核空间都有一个关联的struct file 。它由内核在打开文件时创建，在文件关闭后释放。 <h2 id="Struct-inode"><a href="#Struct-inode" class="headerlink" title="Struct inode"></a>Struct inode</h2>用来记录文件的物理上的信息，例如文件大小，文件归属，文件权限等等。<h2 id="Struct-file-operations"><a href="#Struct-file-operations" class="headerlink" title="Struct file_operations"></a>Struct file_operations</h2>一个函数指针的集合，定义能在设备上进行的操作。结构中的成员指向驱动中的函数，这些函数实现一个特别的操作，对于不支持的操作保留为NULL。 <h3 id="定义如下"><a href="#定义如下" class="headerlink" title="定义如下"></a>定义如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">shumg_fops</span> =</span> &#123;</span><br><span class="line">  .owner = THIS_MODULE,</span><br><span class="line">  .ioctl  =  shumg_ioctl,<span class="comment">//读写外其他操作</span></span><br><span class="line">  .write  =  shumg_write,<span class="comment">//写</span></span><br><span class="line">  .read  =  shumg_read,<span class="comment">//读</span></span><br><span class="line">  .open  =  shumg_open,<span class="comment">//打开</span></span><br><span class="line">  .release =  shumg_release,<span class="comment">//关闭</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>`<h1 id="各个函数介绍"><a href="#各个函数介绍" class="headerlink" title="各个函数介绍"></a>各个函数介绍</h1></li><li>open</li><li>release</li><li>read</li><li>write</li><li>ioctl</li></ul><h2 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` <span class="keyword">int</span> (*open) (struct inode *，struct file *)；</span><br></pre></td></tr></table></figure><p>`尽管这常常是对设备文件进行的第一个操作， 不要求驱动声明一个对应的方法。 如果这个项是 NULL，设备打开一直成功，但是你的驱动不会得到通知。</p><p>Open的作用通常初始化了设备，并表明次设备号</p><h2 id="release-close函数"><a href="#release-close函数" class="headerlink" title="release/close函数"></a>release/close函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">int</span> (*release) (struct inode *， struct file *)；</span><br></pre></td></tr></table></figure><p>`尽管这常常是对设备文件进行的第一个操作， 不要求驱动声明一个对应的方法。 如果这个项是 NULL，设备打开一直成功，但是你的驱动不会得到通知。</p><p>Release的作用通常与Open相反。</p><h2 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd,  <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure><p>`</p><h3 id="具体作用"><a href="#具体作用" class="headerlink" title="具体作用"></a>具体作用</h3><p>从设备中读取数据。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>ssize_t在位数不同的操作系统下位数没有变化。</p><ul><li>fd：要读取的文件</li><li>buff： 指向数据缓存</li><li>size_t：大小<br>*read和write的buff参数是用户空间指针。因此，它不能被内核代码直接引用，理由是:用户空间指针在内核空间时可能根本是无效的—–没有那个地址的映射<br>* ### 返回值</li><li> 返回值等于传递给 read 系统调用的count 参数，表明请求的数据传输成功。</li><li>返回值大于 0，但小于传递给read 系统调用的count 参数，表明部分数据传输成功，根据设备的不同，导致这个问题的原因也不同，一般采取再次读取的方法。</li><li>返回值＝0，表示到达文件的末尾。</li><li>返回值为负数，表示出现错误，并且指明是何种错误。</li><li>在阻塞型 io 中，read 调用会出现阻塞。</li></ul><h2 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure><p>`</p><h3 id="具体作用-1"><a href="#具体作用-1" class="headerlink" title="具体作用"></a>具体作用</h3><p>向设备发送数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>返回值等于传递给 write 系统调用的count 参数，表明请求的数据传输成功。</li><li>返回值大于 0，但小于传递给write 系统调用的count 参数，表明部分数据传输成功，根据设备的不同，导致这个问题的原因也不同，一般采取再次读取的方法。</li><li>返回值＝0，表示没有写入任何数据。标准库在调用write 时，出现这种情况会重复调用write。</li><li>返回值为负数，表示出现错误，并且指明是何种错误。错误号的定义参见&lt;linux/ errno.h&gt;</li><li>在阻塞型 io 中，write 调用会出现阻塞。<h2 id="ioctl函数"><a href="#ioctl函数" class="headerlink" title="ioctl函数"></a>ioctl函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">int</span>(*ioctl) (struct inode *inode,struct file *file,<span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg ) </span><br></pre></td></tr></table></figure>`<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3></li><li>inode：文件物理信息</li><li>file： 内核中的文件</li><li>cmd：需要执行的命令</li><li>arg：带入的参数<h3 id="具体作用-2"><a href="#具体作用-2" class="headerlink" title="具体作用"></a>具体作用</h3>控制设备。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux_driver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Driver </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核驱动介绍(1)</title>
      <link href="/2019/08/09/linux-driver1/"/>
      <url>/2019/08/09/linux-driver1/</url>
      
        <content type="html"><![CDATA[<h1 id="驱动介绍"><a href="#驱动介绍" class="headerlink" title="驱动介绍"></a>驱动介绍</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>个人认为驱动就是在底层对于该设备的一些接口进行自己的定义，然后封装成一个个模块，然后让用户在应用层进行自我调用。以下是比较正统的定义。</p><span id="more"></span><p>驱动程序在 Linux 内核里扮演着特殊的角色。 它们是截然不同的”黑盒子”， 使硬件的特殊的一部分响应定义好的内部编程接口。 它们完全隐藏了设备工作的细节. 用户的活动通过一套标准化的调用来进行， 这些调用与特别的驱动是独立的； 设备驱动的角色就是将这些调用映射到作用于实际硬件的和设备相关的操作上。 这个编程接口是这样， 驱动可以与内核的其他部分分开建立， 并在需要的时候在运行时”插入”。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>Linux下对于外部设备只能通过驱动进行访问，同时对于一些接口的调用有统一的方程可以使用。</li><li>驱动程序运用的地址是内核的地址，而不是虚拟地址。</li><li>驱动程序是直接对设备硬件进行控制操作的。<h2 id="驱动分类"><a href="#驱动分类" class="headerlink" title="驱动分类"></a>驱动分类</h2></li><li>字符设备驱动</li><li>块设备驱动</li><li>网络接口驱动</li></ol><p>字符设备：是一种按字节来访问的设备，字符驱动则负责驱动字符设备，这样的驱动通常实现open、close、read和write系统调用。<br>块设备：在大多数UNIX系统，块设备不能按字节处理数据，只能一次传送一个或多个长度是512字节（或一个更大的2次幂的数）的整块数据。<br>网络接口：任何网络事务都通过一个接口来进行，一个接口通常是一个硬件设备（eth0），但是也可以是一个纯粹的软件设备，如回环接口（lo）。一个网络接口负责发送和接受数据报文。 以上的标示和对应数据会在mac系统上用ifconfig在终端中获取。</p><h1 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h1><h2 id="字符设备组成"><a href="#字符设备组成" class="headerlink" title="字符设备组成"></a>字符设备组成</h2><ul><li>设备号</li><li>创建设备文件</li><li>设备注册</li><li>重要数据结构</li><li>设备操作<h2 id="主次设备号"><a href="#主次设备号" class="headerlink" title="主次设备号"></a>主次设备号</h2>主次设备号组成一个设备的设备号。主在前，次在后。<br>分配住主备号有两种：</li><li>静态申请</li><li>动态申请<h3 id="静态申请"><a href="#静态申请" class="headerlink" title="静态申请"></a>静态申请</h3>一般用 cat /proc/devices 确定一个设备号有没有被使用，然后用register_chrdev_region 函数进行注册设备号。<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4>如果不每次查找是否有该设备，会容易发生设备号冲突，导致驱动程序无法注册。每次查找又很麻烦。<h4 id="具体函数及操作"><a href="#具体函数及操作" class="headerlink" title="具体函数及操作"></a>具体函数及操作</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">int</span> <span class="title">register_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from,<span class="keyword">unsigned</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure>`<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5>from：为主设备号与次设备号的组合<br>count：为要注册的设备号的数量<br>name： 设备名字（具体体现在proc/devices 中显示的名字）<h3 id="动态申请"><a href="#动态申请" class="headerlink" title="动态申请"></a>动态申请</h3>用alloc_chrdev_region分配设备号，不需要查表。但是设备号得在安装完驱动后才能获取，因为安装前没有分配主设备号。<h4 id="具体函数及操作-1"><a href="#具体函数及操作-1" class="headerlink" title="具体函数及操作"></a>具体函数及操作</h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> *dev,<span class="keyword">unsigned</span> baseminor,<span class="keyword">unsigned</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure>`<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5>dev： 分配到的设备号<br> baseminor： 起始次设备号<br> count： 要注册的设备号个数<br> name： 设备名</li></ul><p>篇幅有限，之后的见下一篇。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Driver </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP &amp; UDP 局域网应用</title>
      <link href="/2019/08/05/TCP&amp;UDP/"/>
      <url>/2019/08/05/TCP&amp;UDP/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>一般而言，路由器的作用是把不同网段的内网外网进行连接，进行传输数据。因为绝大多数内网IP地址很可能是相同的。相对而言，一个IP地址其实是一个设备的一个标识。那如果那么多设备的IP地址一样，那服务器还怎么区分需要输送数据到那台设备呢。所以这时候就需要路由器，给需要访问外网的内网设备一个处理过的IP地址。</p><span id="more"></span><h2 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h2><p>有些朋友可能在家里配置过家里的路由器，一般而言进入路由器地址进行配置的IP是192.168.1.1。所以这些地址确实会是重复的。</p><h1 id="如何实现数据交互"><a href="#如何实现数据交互" class="headerlink" title="如何实现数据交互"></a>如何实现数据交互</h1><p>通过今年暑假的实习，也粗略的了解了一些互联网的知识，然后搭建了一个类似一下的一个局域网网络。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988402/WechatIMG5_tnqecw.jpg" alt=" WechatIMG5 "><br>由途中可知，在LAN口这端的内网是可以直接连接外网的，可以通过ping测试是否可以从内网连接至外网。<br>而在WAN口这端的外网是无法直接连通内网的，其中有很多种办法。这里我用的是端口映射（TCP&amp;UDP）来实现。</p><h1 id="端口映射理解"><a href="#端口映射理解" class="headerlink" title="端口映射理解"></a>端口映射理解</h1><p>对于本人而言，端口映射表现在外网访问一个可能不唯一的内网地址的时候（因为内网地址可能会有重复，在一个路由器下面可能还有路由器进行分配独立的内网地址，所有当只有一个ip地址的时候，可能未必能定位是哪个（自己理解可能不正确））会在输入内网ip的同时额外补充一个端口号，这个端口号具体体现在锁定那个需要信息交互的IP地址。</p><h2 id="举例1-1"><a href="#举例1-1" class="headerlink" title="举例1"></a>举例1</h2><p>显示为192.168.1.254:4000<br>^                     ^<br>   IP 地址.           端口号</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="1-访问路由器地址进行路由器配置"><a href="#1-访问路由器地址进行路由器配置" class="headerlink" title="1. 访问路由器地址进行路由器配置"></a>1. 访问路由器地址进行路由器配置</h2><h3 id="a）登陆路由器地址"><a href="#a）登陆路由器地址" class="headerlink" title="a）登陆路由器地址"></a>a）登陆路由器地址</h3><p>一般而言，内网只有一个路由器的话，路由器IP地址一般为192.168.1.1<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988405/WechatIMG7_njq2st.jpg"><br>在任意网页输入路由器IP地址进入配置路由器界面，首次访问可能需要输入路由器账号密码，默认为账号：admin，密码：admin。</p><h3 id="b）配置允许访问该路由器的设备"><a href="#b）配置允许访问该路由器的设备" class="headerlink" title="b）配置允许访问该路由器的设备"></a>b）配置允许访问该路由器的设备</h3><p>具体通过访问路由器设备的IP地址和MAC地址。（网络地址：访问网络的标签和物理地址：设备独有的标签）如下图所示，从上至下为mac的IP地址和Mac地址，在Mac上搭载的虚拟机的IP地址和Mac地址和在外网的Windows端的IP地址和Mac地址。如上所示，因为要建立路由而不是交换机，WAN口和LAN口的网段并不一样。192.168.1.x和192.168.232.x，其中232也是随机设的值。具体为外网访问静态路由器IP是输入的端口号将对于这里输入的内网IP。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988407/WechatIMG10_xb7gcf.jpg"></p><h3 id="c）设置外网WAN口网络设置"><a href="#c）设置外网WAN口网络设置" class="headerlink" title="c）设置外网WAN口网络设置"></a>c）设置外网WAN口网络设置</h3><p>因为本人设置的是外网的静态IP所以需要额外设置，因为外网网段为192.168.232.x所以只需设置一个与外网设备不同但同网段的IP，如192.168.232.3而不是Windows段的192.168.232.2。当时本人设成同一个IP，然后在端口映射测试上花费了颇多时间。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988406/WechatIMG9_ispyvc.jpg"></p><h3 id="d）设置端口转发"><a href="#d）设置端口转发" class="headerlink" title="d）设置端口转发"></a>d）设置端口转发</h3><p>然后开始配置端口转发的功能，给出外网访问路由器的WAN口外网静态IP地址后输入相对应端口后跳转到内网哪个IP地址，然后同意TCP和UDP协议就OK了。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988413/WechatIMG11_ct8jbn.jpg"></p><p>至此，路由器上的端口转发设置就全部完成了！</p><h2 id="2-配置进行tcp数据传输"><a href="#2-配置进行tcp数据传输" class="headerlink" title="2. 配置进行tcp数据传输"></a>2. 配置进行tcp数据传输</h2><h3 id="a）选择工具"><a href="#a）选择工具" class="headerlink" title="a）选择工具"></a>a）选择工具</h3><ol><li>Windows我选择的是TCP&amp;UDP测试工具 1.02版本）使用iperf 2.0 java版测试带宽</li><li>Mac我选择是app store的异米网络工具</li><li>linux我选择是iperf3（最后又借助telnet测试是否联通）<h3 id="b-1）进行-1-gt-2-互联"><a href="#b-1）进行-1-gt-2-互联" class="headerlink" title="b.1）进行 1 -&gt; 2 互联"></a>b.1）进行 1 -&gt; 2 互联</h3>Mac端异米网络工具<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988408/WechatIMG12_zcetsn.jpg"><br>Windows段TCP&amp;UDP测试工具<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988410/WechatIMG13_kg4ia3.jpg"><br>配置如上图所示<br>位于内网的mac端访问外网Windows端之间输入目标IP就可直接访问，（端口不一样好像也能访问，但是可能是只有两台设备的原因）而位于外网的设备访问内网就得输入路由器WAN口的IP地址也就是之前关于网络静态的设置IP再加上防火墙上设置的端口转移的端口号。然后在两端都有接收到信息。<h3 id="b-2）进行1-gt-3互联"><a href="#b-2）进行1-gt-3互联" class="headerlink" title="b.2）进行1-&gt; 3互联"></a>b.2）进行1-&gt; 3互联</h3>这次用了iperf 2.0 java版本进行互联<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988412/WechatIMG16_msnbpa.jpg"><br>这次用了iperf3 ubuntu命令行<br><code>iperf3 -c 192.169.232.2 -f -k</code><br>上两图图是以windows外网作为服务端，所建立的连接</li></ol><p> <em>这里用iperf2和iperf3互联一定要打开jperf2中“Enable Compatibility Mode”，因为两个版本不同。</em><br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988412/WechatIMG17_cyaqh3.jpg"><br>最后附上一张测试带宽的图，配上输出的文本，用python算出了最大带宽。<br><img src="https://res.cloudinary.com/djyodckal/image/upload/v1564988414/WechatIMG20_g6a2ov.jpg"><br>实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os      <span class="comment"># List of  module  import  statements</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">DataPath = os.path.expanduser(<span class="string">&#x27;/Volumes/CENA_X64FRE&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMaxBandwidth</span>(<span class="params">name</span>):</span></span><br><span class="line">filename1 = DataPath + name</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename1) <span class="keyword">as</span> f:</span><br><span class="line">lines1 = f.read().splitlines()</span><br><span class="line">patternIP = <span class="string">&quot;[0-9]()&#123;1,3&#125;[.]()[0-9]()&#123;1,3&#125;[.]()[0-9]()&#123;1,3&#125;[.]()[0-9]()&#123;1,3&#125;&quot;</span></span><br><span class="line">IPs = re.findall(patternIP,lines1[<span class="number">5</span>]()+lines1[<span class="number">6</span>]())</span><br><span class="line">patternBandWidth = <span class="string">&quot;[0-9]()+[ \t]()Kbits/sec&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">bandwidthList =[]()</span><br><span class="line"><span class="keyword">while</span> i \&lt; <span class="built_in">len</span>(lines1):</span><br><span class="line">bandwidth = re.findall(patternBandWidth,lines1[i]())</span><br><span class="line"><span class="keyword">if</span> bandwidth != []():</span><br><span class="line">bandwidthList.append(<span class="built_in">int</span>(bandwidth[<span class="number">0</span>]().split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]()))</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">MaxBandwidth = <span class="built_in">max</span>(bandwidthList)</span><br><span class="line"><span class="keyword">return</span> (IPs,MaxBandwidth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">answer = findMaxBandwidth(<span class="string">&quot;/TCP_WANtoLAN&quot;</span>)</span><br><span class="line">IPs = answer[<span class="number">0</span>]()</span><br><span class="line">MaxBandwidth = answer[<span class="number">1</span>]()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;TCP: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Local IP: &quot;</span> + IPs[<span class="number">0</span>]() + <span class="string">&quot; destinated IP: &quot;</span> + IPs[<span class="number">1</span>]())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bandwidth: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="built_in">int</span>(MaxBandwidth)/<span class="number">1024.0</span>,<span class="number">2</span>))+ <span class="string">&#x27;M/s&#x27;</span>)</span><br><span class="line">answer2 = findMaxBandwidth(<span class="string">&quot;/UDP_WANtoLAN&quot;</span>)</span><br><span class="line">IPs2 = answer2[<span class="number">0</span>]()</span><br><span class="line">MaxBandwidth2 = answer2[<span class="number">1</span>]()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;UDP: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Local IP: &quot;</span> + IPs2[<span class="number">0</span>]() + <span class="string">&quot; destinated IP: &quot;</span> + IPs2[<span class="number">1</span>]())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bandwidth: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="built_in">int</span>(MaxBandwidth2)/<span class="number">1024.0</span>,<span class="number">2</span>))+<span class="string">&#x27;M/s&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>`至此网络协议相关就结束了</p>]]></content>
      
      
      <categories>
          
          <category> TCP &amp; UDP 介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP &amp; UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyqt5 textbox中识别整数与小数无报错办法</title>
      <link href="/2019/08/02/Pyqt5_whaterever_datatype/"/>
      <url>/2019/08/02/Pyqt5_whaterever_datatype/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>要求对如下计算机进行编程。可以是任何输入，但只有整数或者小数，结果才有值。</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/20190406100216180.png"><br>要求无论什么输入都不允许有报错。<br>所以我就用了正则表达式来做。</p><p>在查看了calculator.io 转换而来的.py文件的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`self.edtNumber1 = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">self.edtNumber1.setGeometry(QtCore.QRect(<span class="number">70</span>, <span class="number">50</span>, <span class="number">146</span>, <span class="number">27</span>))</span><br><span class="line">self.edtNumber1.setObjectName(<span class="string">&quot;edtNumber1&quot;</span>)</span><br><span class="line">self.edtNumber2 = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">self.edtNumber2.setGeometry(QtCore.QRect(<span class="number">360</span>, <span class="number">50</span>, <span class="number">146</span>, <span class="number">27</span>))</span><br><span class="line">self.edtNumber2.setObjectName(<span class="string">&quot;edtNumber2&quot;</span>)</span><br><span class="line">self.lblNumber1 = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">self.lblNumber1.setGeometry(QtCore.QRect(<span class="number">110</span>, <span class="number">30</span>, <span class="number">71</span>, <span class="number">17</span>))</span><br><span class="line">self.lblNumber1.setObjectName(<span class="string">&quot;lblNumber1&quot;</span>)</span><br><span class="line">self.lblNumber2 = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">self.lblNumber2.setGeometry(QtCore.QRect(<span class="number">400</span>, <span class="number">30</span>, <span class="number">71</span>, <span class="number">17</span>))</span><br><span class="line">self.lblNumber2.setObjectName(<span class="string">&quot;lblNumber2&quot;</span>)</span><br></pre></td></tr></table></figure><p>`得知self.edtNumber1为box1的输入，self.edtNumber2为box2的输入。<br>以下是实现计算器的最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`pattern =<span class="string">&#x27;(?P\&lt;number\&gt;[+-] ?[0-9] *[.] [0-9] +)&#x27;</span></span><br><span class="line">match=re.search(pattern,self.edtNumber2.text())</span><br><span class="line"><span class="keyword">if</span> match !=<span class="literal">None</span> <span class="keyword">and</span> match[<span class="string">&quot;number&quot;</span>]  == self.edtNumber2.text():</span><br><span class="line">number2 = <span class="built_in">float</span>(match[<span class="string">&quot;number&quot;</span>] )</span><br><span class="line">pattern1 =<span class="string">&#x27;(?P\&lt;number\&gt;[+-] ?[0-9] +)&#x27;</span></span><br><span class="line">match1=re.search(pattern1,self.edtNumber2.text())</span><br><span class="line"><span class="keyword">if</span> match == <span class="literal">None</span> <span class="keyword">and</span> match1 != <span class="literal">None</span> <span class="keyword">and</span> match1[<span class="string">&quot;number&quot;</span>]  == self.edtNumber2.text():</span><br><span class="line">number2 = <span class="built_in">int</span>(match1[<span class="string">&quot;number&quot;</span>] )</span><br></pre></td></tr></table></figure><h2 id="一开始的想法"><a href="#一开始的想法" class="headerlink" title="一开始的想法"></a>一开始的想法</h2><p>因为要判断小数还是整数，所以先判断数据类型。但是因为用正则表达式的话，满足整数的表达式也能在小数中找到。所以要改变查找整数和小数的顺序。</p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a><strong>举例</strong>：</h3><p><strong>输入</strong>：12.78</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`pattern =<span class="string">&#x27;(?P\&lt;number\&gt;[+-] ?[0-9] *[.] [0-9] +)&#x27;</span></span><br><span class="line">match=re.search(pattern,self.edtNumber2.text())</span><br></pre></td></tr></table></figure><p>`用着整数的正则先查找，匹配如下。<br><strong>输出</strong>：==12==.==78==<br>12, 78<br>显然，这是一个小数而不是整数。<br>所以先判断小数，再根据非小数的结果判断是否有整数。<br>所以就有了原先的判断语句。</p><p><code> if match == None and match1 != None：</code></p><p>`来找到不符合小数却符合整数的类型。</p><h2 id="但是出现了另一个问题"><a href="#但是出现了另一个问题" class="headerlink" title="但是出现了另一个问题"></a><strong>但是出现了另一个问题</strong></h2><p>就是该方法无法读取正确大的结果<br>如果输入如下</p><h3 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a><strong>举例1</strong>：</h3><p><strong>输入</strong>：12.78De<br><strong>输出</strong>：==12.78==<br>这不是我们想要的结果。<br>于是就做了如下修改。</p><p><code>if match !=None and match[&quot;number&quot;]== self.edtNumber2.text()</code></p><p>`除了满足正则表达式的例子外，不应该有其他任何字符。</p><h3 id="举例2："><a href="#举例2：" class="headerlink" title="举例2："></a><strong>举例2</strong>：</h3><p><strong>输入</strong>：12.78De<br>match<a href="#">“number”</a> == 12.78<br>self.edtNumber2.text() == 12.78De<br>(match<a href="#">“number”</a> == self.edtNumber2.text()) == False<br>运用了这个方法后，就不再需要整数与小数先后的办法了。因为不是正确的数据类型的话，在第二个if条件就会出错。<br>最后下面是完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">import</span> re  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui  </span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication,QFileDialog</span><br><span class="line"><span class="keyword">from</span> calculator <span class="keyword">import</span> * </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathConsumer</span>(<span class="params">QMainWindow, Ui_MainWindow</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line"> <span class="built_in">super</span>(MathConsumer, self).__init__(parent)</span><br><span class="line"> self.setupUi(self)</span><br><span class="line"> self.btnCalculate.clicked.connect(self.calculate)</span><br><span class="line"><span class="comment"># self.btnCalculate.clicked.connect(performOperation())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># self.lblNumber1 =</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">number1 = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">number2 = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="comment"># print(float(self.edtNumber1.text()))</span></span><br><span class="line">self.edtNumber1.text()</span><br><span class="line">pattern =<span class="string">&#x27;(?P\&lt;number\&gt;[+-]() ?[0-9]() *[.]() [0-9]() +)&#x27;</span></span><br><span class="line">match=re.search(pattern,self.edtNumber1.text())</span><br><span class="line"><span class="keyword">if</span> match !=<span class="literal">None</span> <span class="keyword">and</span> match[<span class="string">&quot;number&quot;</span>]()  == self.edtNumber1.text():</span><br><span class="line">number1 = <span class="built_in">float</span>(match[<span class="string">&quot;number&quot;</span>]() )</span><br><span class="line">pattern1 =<span class="string">&#x27;(?P\&lt;number\&gt;[+-]() ?[0-9]() +)&#x27;</span></span><br><span class="line">match1=re.search(pattern1,self.edtNumber1.text())</span><br><span class="line"><span class="keyword">if</span> match == <span class="literal">None</span> <span class="keyword">and</span> match1 != <span class="literal">None</span> <span class="keyword">and</span> match1[<span class="string">&quot;number&quot;</span>]()  == self.edtNumber1.text():</span><br><span class="line">number1 = <span class="built_in">int</span>(match1[<span class="string">&quot;number&quot;</span>]() )</span><br><span class="line"></span><br><span class="line">pattern =<span class="string">&#x27;(?P\&lt;number\&gt;[+-]()?[0-9]() *[.]() [0-9]() +)&#x27;</span></span><br><span class="line">match=re.search(pattern,self.edtNumber2.text())</span><br><span class="line"><span class="keyword">if</span> match !=<span class="literal">None</span> <span class="keyword">and</span> match[<span class="string">&quot;number&quot;</span>]()  == self.edtNumber2.text():</span><br><span class="line">number2 = <span class="built_in">float</span>(match[<span class="string">&quot;number&quot;</span>]() )</span><br><span class="line">pattern1 =<span class="string">&#x27;(?P\&lt;number\&gt;[+-]() ?[0-9]() +)&#x27;</span></span><br><span class="line">match1=re.search(pattern1,self.edtNumber2.text())</span><br><span class="line"><span class="keyword">if</span> match == <span class="literal">None</span> <span class="keyword">and</span> match1 != <span class="literal">None</span> <span class="keyword">and</span> match1[<span class="string">&quot;number&quot;</span>]()  == self.edtNumber2.text():</span><br><span class="line">number2 = <span class="built_in">int</span>(match1[<span class="string">&quot;number&quot;</span>]() )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number1 == <span class="string">&#x27;E&#x27;</span> <span class="keyword">or</span> number2 == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">self.edtResult.setText(<span class="string">&quot;E&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> self.cboOperation.currentText() == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">self.edtResult.setText(<span class="built_in">str</span>(number1 + number2))</span><br><span class="line"><span class="keyword">elif</span> self.cboOperation.currentText() == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">self.edtResult.setText(<span class="built_in">str</span>(number1 * number2))</span><br><span class="line"><span class="keyword">elif</span> self.cboOperation.currentText() == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">self.edtResult.setText(<span class="built_in">str</span>(number1 - number2))</span><br><span class="line"><span class="keyword">elif</span> self.cboOperation.currentText() == <span class="string">&quot;/&quot;</span>:</span><br><span class="line"><span class="keyword">if</span> number2 != <span class="number">0</span> <span class="keyword">or</span> number2 != <span class="number">0.0</span>:</span><br><span class="line">self.edtResult.setText(<span class="built_in">str</span>(number1 / number2))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.edtResult.setText(<span class="string">&quot;E&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">currentApp = QApplication(sys.argv)</span><br><span class="line">currentForm = MathConsumer()</span><br><span class="line">currentForm.show()</span><br><span class="line">currentApp.exec_()</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
      
      
      <categories>
          
          <category> Python Regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 C编程入门记录 Timers(上)</title>
      <link href="/2019/08/02/STM32(1)/"/>
      <url>/2019/08/02/STM32(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍Tim的用途："><a href="#介绍Tim的用途：" class="headerlink" title="介绍Tim的用途："></a>介绍Tim的用途：</h2><p>在stm32里常常需要用Timer来决定一件事项的频率。最简单的例子，如果想让一个LED灯已一个频率闪烁，就要用Tim来确认频率。那接下来就要介绍一下如何建立一个Tim的计时器。</p><span id="more"></span><h2 id="过程介绍"><a href="#过程介绍" class="headerlink" title="过程介绍"></a>过程介绍</h2><h3 id="1-选择计时器"><a href="#1-选择计时器" class="headerlink" title="1.选择计时器"></a>1.选择计时器</h3><p>首先在I/Opin中，我们暂时只能设置输入与输出。alternative和analog mode还没有涉及，参照下图。<br><img src="https://img-blog.csdnimg.cn/20190407085943770.jpg" alt="这是stm32 reference book上的内容"><br>首先我们要用一个general-purpose的pin连接到Tim，所以这里就不再是输入与输出的结果，而是alternate function mode。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>首先打开 I/O port C clock才能给PC中的pin赋值。<br>假设我们要设置PC8为Tim3的启动pin</p><p>RCC-&gt;AHBENR |= RCC_AHBENR_GPIOCEN;//1<br>GPIOC-&gt;MODER &amp;= (3 &lt;&lt;(2  8));//2<br>GPIOC-&gt;MODER |= 2 &lt;&lt;(2 * 8);//3<br>GPIOC-&gt;AFR[1] &amp;= (15&lt;&lt;(48));//4</p><p>1.打开所有GPIOC的pin.<br>2.因为下面要给PC8赋值，所以要先清空原来的数值，否则原来数字或等于10结果可能不为10.ex.10|11=11～=10.<br>3.在上图表格中在moder中一个pin占据两位，moder8在第16位，所以向右移8*2位并赋予二进制10也就是2<br>因为不能改变其他位数上的值所以用“|=”“或”来赋值<br>4.这一步要给把pc8绑定到tim3.<br>需要查datasheet。<br><img src="https://img-blog.csdnimg.cn/20190407091823489.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4MDIxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为pc8对应的alternate function 只有一个就不需要再次查表来，再查reference book 中AFR的部分。<br><img src="https://img-blog.csdnimg.cn/20190407092049235.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4MDIxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为PC8中的8大于7，所以它属于AFRH组。又因为PC8只有一个alternate function。<br>所以只有赋予0000就行，也就是～（1111）就行了。<br>至此就把PC8和Tim3channel3关联了。<br>接下来就是如何选择Tim3的一些事项，下篇再讲。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 TIMER </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> TIMER </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 C编程入门记录 Timers(下)</title>
      <link href="/2019/08/02/STM32(2)/"/>
      <url>/2019/08/02/STM32(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>在上篇文章中讲述了如何把GPIO的端口绑定到TIM上，接下来讲一下如何设置TIM的配置。</p><span id="more"></span><h2 id="过程总览"><a href="#过程总览" class="headerlink" title="过程总览"></a>过程总览</h2><p>– 设置prescaler（预分频器）<br>– 设置the auto-reload（自动重制）<br>– 设置direction/mode of the counter（计数的方向）<br>– 设置output compare mode（输出选择比较方式）<br>– 打开频道连接到端口<br>– 打开 timer的计数器</p><h3 id="1-预分频器"><a href="#1-预分频器" class="headerlink" title="1.预分频器"></a>1.预分频器</h3><p>预分频器就是重复一个计数轮回的次数。代码表述如下：<br>    TIM3-&gt;PSC = 12000 – 1;//重复轮回的次数为12000，因为是从0 开始的所以0-11999为12000.<br>由于TIM的最大频率是48Mhz，所以要得到想要的频率，就要通过运算得知预分频器和计数的值。<br>下面是公式<br>想要的频率 = 48 000 000 / （（TIM3-&gt;PSC + 1 ）*（TIM3-&gt;ARR + 1 ）</p><p>TIM3-&gt;ARR这个会在接下来进行介绍。</p><h3 id="2-自动重制"><a href="#2-自动重制" class="headerlink" title="2.自动重制"></a>2.自动重制</h3><p>自动重制的值为一个计数器从0数到的值。代表计数器达到这个值以后下一位就会清零。<br><code>TIM3-&gt;ARR = 4000 – 1;</code><br>`和上面的代码结合起来就可以了解到，这两个值和想到得到的TIM频率的乘积就是TIM的最大乘积48Mhz。</p><h3 id="3-计数器初始值"><a href="#3-计数器初始值" class="headerlink" title="3.计数器初始值"></a>3.计数器初始值</h3><p>这个值决定了计数器的开始值，通过改变不同频道的初始值可以让相同事件以不同的时间但是相同的频率运行。<br>    TIM3-&gt;CCR3 = 3456;<br>`当一个完整的频率完成的时候，将会输出一个CK_CNT给输出</p><h3 id="4-输出的模式"><a href="#4-输出的模式" class="headerlink" title="4.输出的模式"></a>4.输出的模式</h3><p>stm32TIM输出的模式大概主要的有8种：通过不同的凡是输出的信号也会有不同。<br>0000: 输出冻结，没有任何事发生。<br>0001: 当CNT（计数比较值）的值等于计数的值，输出将变成高平电压。<br>0010: 当CNT的值（计数比较值）的值等于计数的值，输出将变成低平电压。<br>0011: 当CNT的值（计数比较值）的值等于计数的值，输出将与当前相反。<br>0100: 强制低平电压，且永远不会发生改变。<br>0101: 强制高平电压，且永远不会发生改变。<br>0110: PWM输出模式1，如果计数是往上数的，如果自己当得到的频率的值小于计数的值，高平电压。其他的低平电压。<br>如果计数是往下数的，如果自己当得到的频率的值大于计数的值，高平电压。其他的低平电压<br>0111: PWM输出模式2，如果计数是往上数的，如果自己当得到的频率的值大于等于计数的值，高平电压。其他的低平电压。<br>如果计数是往下数的，如果自己当得到的频率的值大于计数的值，高平电压。其他的低平电压。</p><p>然后模式的选择在输出比较模式的寄存器。<br>代码如下:</p><h5 id="举例：选择0011"><a href="#举例：选择0011" class="headerlink" title="举例：选择0011"></a>举例：选择0011</h5><pre><code>TIM3-&gt;CCMR2 &amp;= TIMCCMR2_OC3M2; //把位数2的值清零，因为有可能先前赋的值没有清零。TIM3-&gt;CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_0;//给位数1，0的值清零，因为有可能先前赋的值没有清零。</code></pre><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>当上面的配置设置好了以后，就可以启动计数器了，让TIM生效。</p><p>以上就是stm32 TIM功能的介绍及实现。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 TIMER </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> C - TIMER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python正则表达式两者取一的表达</title>
      <link href="/2019/08/02/python%20(regex_either%20_expression)/"/>
      <url>/2019/08/02/python%20(regex_either%20_expression)/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>曾经要用正则表达式从.txt或者.dat文本中寻找mac的地址的办法<br>目标数据 2a:3v:5g:3k:3d:6h或者2a-3v-5g-3k-3d-6h<br>可能是由于是16进制，字母不允许大于f。英文字符无视大小写。</p><span id="more"></span><h4 id="一开始的错误代码"><a href="#一开始的错误代码" class="headerlink" title="一开始的错误代码"></a>一开始的错误代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="string">&quot;[a-fA-F0-9](#)2[:-](#)[a-fA-F0-9](#)2[:-](#)[a-fA-F0-9](#)2[:-](#)[a-fA-F0-9](#)2[:-](#)[a-fA-F0-9](#)2[:-](#)[a-fA-F0-9](#)2&quot;</span></span><br></pre></td></tr></table></figure><p>`由于这个正则表达式能抓取一些错误的例子。</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p> <strong>输入</strong>: 2a-3v:5g-3k:3d:6h<br><strong>输出</strong>: 2a-3v:5g-3k:3d:6h<br>会出现”:”与”-“混用的例子，这些是错误的例子。由于输出的顺序必须和文本出现的顺序一致，所以不能分开来查找，于是就做了如下的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="string">&quot;(?:[a-fA-F0-9](#)2[:](#)[a-fA-F0-9](#)[:](#)[a-fA-F0-9](#)2[:](#)[a-fA-F0-9](#)2[:](#)[a-fA-F0-9](#)2[:](#)[a-fA-F0-9](#)2|[a-fA-F0-9](#)2[-](#)[a-fA-F0-9](#)[-](#)[a-fA-F0-9](#)2[-](#)[a-fA-F0-9](#)2[-](#)[a-fA-F0-9](#)2[-](#)[a-fA-F0-9](#)2)&quot;</span></span><br></pre></td></tr></table></figure><p>`其中(? |-)表示的是两种只能有一种。要不就是全部：衔接的，要不就是全部-衔接的mac地址表达式。</p>]]></content>
      
      
      <categories>
          
          <category> Python Regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读取文件去掉空格读取数据方法</title>
      <link href="/2019/08/02/python(delete_space)/"/>
      <url>/2019/08/02/python(delete_space)/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>读取.txt或者.dat文件然后转成list类型，方便读取数据。</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/20190406110524542.png"><br><code> list(filter(None,lines[i].split(&#39; &#39;)))[x]</code><br>`通过把空格替换成None来消除空格，x为数据的列数。</p>]]></content>
      
      
      <categories>
          
          <category> python text </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文档 </tag>
            
            <tag> 去空格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2019/08/02/introduction/"/>
      <url>/2019/08/02/introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-Rick-Zhang’s-blog"><a href="#Welcome-to-Rick-Zhang’s-blog" class="headerlink" title="Welcome to Rick_Zhang’s blog"></a>Welcome to Rick_Zhang’s blog</h2><p>在下在试了很多次后终于创建了属于自己的博客，实属不易，所以第一稿就先中文写了。</p><span id="more"></span><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>建立属于自己的博客原因有很多，会在下面慢慢论述。其中最主要的原因就是想记录一些自己在学习编程途中的一些想法。然后能加深自己的印象，以便在遇到相似问题的时候能提高效率。<br>第二就是能把自己的一些代码写出来，希望大神能给一些修改的建议，有一个实力的提升。<br>第三就是顺便找实习或工作的时候，能体现自己的所思所想，让别人能更好的了解自己的实力与不足。（毕竟自己实力还很弱，哈哈哈！）</p><h1 id="本博客中的主要内容"><a href="#本博客中的主要内容" class="headerlink" title="本博客中的主要内容"></a>本博客中的主要内容</h1><p>本人是个习惯用python的硬件工程师。处理数据的时候倾向于用python。学硬件的原因也很简单，就是希望能掌握一点东西，然后可以自己动手做一些有趣实用的项目。</p>]]></content>
      
      
      <categories>
          
          <category> 介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
